/** This file is called from within the constructor to
     * initialize the library.
     * WARNING: Do NOT remove this code. The content of this method is
     * always regenerated by system. If this comment is removed the program will blow up
     */

// When I wrote this, only God and I understood what I was doing
// Now, God only knows

// I dedicate all this code, all my work, to my wife, Kristen Li, who will
// have to support me and our two children and the dog once it gets
// released into the public.

// #region global vars

var $linkRoot = window.location.protocol + "//" + location.host;
var pgurl = window.location.href.substr(window.location.href.lastIndexOf("/") + 1);
var DynamicSelect2 = 0;
var CustomSearch = false;
var TreeAndSelectData = [];
var CurrentForm, CurrentScript;
// #endregion

// #region database
var dbAdapter = new LokiIndexedAdapter("DATABASE");
var localDB = new loki("LOCALDATA", {
    verbose: true,
    autosave: true,
    autosaveInterval: 0,
    autoload: true,
    adapter: dbAdapter,
    autoloadCallback: function () {
        //if (checkLocalExist('DanhMuc')) {
        //    var localData = getFromLocal('DanhMuc');
        //    DanhMucAjax.GetAllDanhMuc(localData.Version, function (data) {
        //        if (data.isSuccess) {
        //            if (data.Version === localData.Version) {
        //                capNhatDanhMuc(localData.Value);
        //            } else {
        //                saveToLocal('DanhMuc', data);
        //                capNhatDanhMuc(data.Value);
        //            }
        //        } else {
        //            VBDLIS.Msg.show({ msg: "Không lấy được danh mục. " + data.Value, icon: VBDLIS.Msg.UNSUCCESS });
        //        }
        //    });
        //} else {
        //    DanhMucAjax.GetAllDanhMuc(-1, function (data) {
        //        if (data.isSuccess) {
        //            saveToLocal('DanhMuc', data);
        //            capNhatDanhMuc(data.Value);
        //        } else {
        //            VBDLIS.Msg.show({ msg: "Không lấy được danh mục. " + data.Value, icon: VBDLIS.Msg.UNSUCCESS });
        //        }
        //    });
        //}
        //if (db.getCollection("ThuaDat") && db.getCollection("ThuaDat").find().length > 0) {
        //    alertify.alert("Dữ liệu phiên làm việc trước vẫn còn, bạn có muốn khôi phục?", {
        //        "Khôi phục": function () {
        //            $.each(["ThuaDat", "ListDiaChi", "ListMucDichSuDung", "ListNguonGocSuDungDat"], function (index, value) {
        //                if (value.startsWith("List")) {
        //                    GetData(value, "mdlChiTiet" + value.substring(4));
        //                } else {
        //                    GetData(value, "mdlChiTiet" + value);
        //                }
        //                RemoveTempId(value);
        //            });
        //            alertify.success("tl", "Khôi phục thành công");
        //        },
        //        "Xóa": function () {
        //            try {
        //                $.each(["ThuaDat", "ListDiaChi", "ListMucDichSuDung", "ListNguonGocSuDungDat"], function (index, value) {
        //                    var collection = db.getCollection(value);
        //                    if (collection !== null) {
        //                        collection.remove(collection.find());
        //                    }
        //                    db.removeCollection(value);
        //                });
        //                alertify.success("tl", "Xóa thành công");
        //            } catch (err) {
        //                alertify.warning("tl", err);
        //            }
        //        }
        //    });
        //}
    }
});
// #endregion

// #region thư viện VBDLIS
var URL_OU_DEFAULT = "/root/ims/vbd/users/vanphongdatdai/";
var VBDLIS = {
    Global: {
        DANTOC: [],
        DISTRICT: [],
        LOAIBANDODIACHINH: [],
        LOAIBIENDONG: [],
        LOAICAPCONGTRINH: [],
        LOAICAPNHA: [],
        LOAICONGTRINHNGAM: [],
        LOAIDOITUONG: [],
        LOAIGIAYCHUNGNHAN: [],
        LOAIGIAYTODINHKEM: [],
        LOAIGIAYTOTOCHUC: [],
        LOAIGIAYTOTUYTHAN: [],
        LOAIMUCDICHSUDUNG: [],
        LOAINGUONGOCSUDUNGDAT: [],
        LOAINHARIENGLE: [],
        LOAITOCHUC: [],
        PROVINCE: [],
        QUOCTICH: [],
        WARD: []
    },
    VModule: {}
};

VBDLIS.Global.ShowMessage = function (title, message, type) {
    new PNotify({
        title: title,
        text: (message != null && message.length > 0) ? message : "",
        icon: "fa fa-envelope-o",
        type: type
    });
};

VBDLIS.Global.GetDanTocById = function (id) {
    if (VBDLIS.Global.DANTOC && VBDLIS.Global.DANTOC.length > 0) {
        var res = VBDLIS.Global.DANTOC.filter(function (x) {
            return x.danTocId == id;
        });

        if (res && res.length > 0) {
            return res[0].tenDanToc;
        }
    }
    else {
        console.log("Không có dữ liệu dân tộc");
    }

    return "";
};

VBDLIS.Global.GetQuocTichById = function (id) {
    if (VBDLIS.Global.QUOCTICH && VBDLIS.Global.QUOCTICH.length > 0) {
        var res = VBDLIS.Global.QUOCTICH.filter(function (x) {
            return x.quocTichId == parseInt(id);
        });

        if (res && res.length > 0) {
            return res[0].tenQuocGiaQT;
        }
    }

    return "";
};

VBDLIS.Global.GetProvinceById = function (id) {
    if (VBDLIS.Global.PROVINCE != null) {
        var filter = VBDLIS.Global.PROVINCE.filter(function (x) {
            return x.tinhId == parseInt(id);
        });

        if (filter != null && filter.length > 0) {
            return filter[0];
        }
    }

    return {};
};

VBDLIS.Global.GetDistrictById = function (id) {
    if (VBDLIS.Global.DISTRICT != null) {
        var filter = VBDLIS.Global.DISTRICT.filter(function (x) {
            return x.huyenId == parseInt(id);
        });

        if (filter != null && filter.length > 0) {
            return filter[0];
        }
    }

    return {};
};

VBDLIS.Global.GetWardById = function (id) {
    if (VBDLIS.Global.WARD != null) {
        var filter = VBDLIS.Global.WARD.filter(function (x) {
            return x.xaId == parseInt(id);
        });

        if (filter != null && filter.length > 0) {
            return filter[0];
        }
    }

    return {};
};

VBDLIS.Global.GetLoaiNguonGocSuDungById = function (id) {
    if (VBDLIS.Global.LOAINGUONGOCSUDUNGDAT != null) {
        var filter = VBDLIS.Global.LOAINGUONGOCSUDUNGDAT.filter(function (x) {
            return x.loaiNguonGocSuDungDatId == parseInt(id);
        });

        if (filter != null && filter.length > 0) {
            return filter[0];
        }
    }

    return {};
};

VBDLIS.Global.GetLoaiMucDichSuDungById = function (id) {
    if (VBDLIS.Global.LOAIMUCDICHSUDUNG != null) {
        var filter = VBDLIS.Global.LOAIMUCDICHSUDUNG.filter(function (x) {
            return x.loaiMucDichSuDungId == parseInt(id);
        });

        if (filter != null && filter.length > 0) {
            return filter[0];
        }
    }

    return {};
};

VBDLIS.Global.GetLoaiBanDoDiaChinhById = function (id) {
    if (VBDLIS.Global.LOAIBANDODIACHINH != null) {
        var filter = VBDLIS.Global.LOAIBANDODIACHINH.filter(function (x) {
            return x.loaiBanDoDiaChinhId == parseInt(id);
        });

        if (filter != null && filter.length > 0) {
            return filter[0];
        }
    }

    return {};
};

VBDLIS.Global.GetLoaiGiayToTuyThanById = function (id) {
    if (VBDLIS.Global.LOAIGIAYTOTUYTHAN != null) {
        var filter = VBDLIS.Global.LOAIGIAYTOTUYTHAN.filter(function (x) {
            return x.loaiGiayToTuyThanId == parseInt(id);
        });

        if (filter != null && filter.length > 0) {
            return filter[0];
        }
    }

    return {};
};

VBDLIS.Global.TryParseDateTime = function (value) {
    var partent = /^\/Date\(-*\d+\)\/$/; //"/Date(716144400000)/"
    var partentGetText = /-*\d+/;
    if (value == null) return '';
    if (typeof (value) == 'object') {
        value = moment(value);

        if (value._d.toString() == "Invalid Date") {
            value = null;
        }
    }
    else if (typeof (value) == 'string') {
        if (partent.test(value)) {
            value = partentGetText.exec(value)[0];
            value = moment(parseInt(value));
        }
    }


    var date = moment(value, "DD/MM/YYYY", true);
    if (date._d.toString() != "Invalid Date") {
        return date.format("DD/MM/YYYY");
    }
    else {
        return '';
    }

};

VBDLIS.Global.TryParseDateInObject = function (obj) {
    if (typeof (obj) == "object") {
        for (var prop in obj) {
            obj[prop] = VBDLIS.Global.TryParseDateInObject(obj[prop]);
        }

        return obj;
    }
    else {
        var pattern = /Date\(([^)]+)\)/;
        var results = pattern.exec(obj);

        if (results && results.length == 2) {
            var date = VBDLIS.Global.TryParseDateTime(obj);

            if (date) {
                return date;
            }
        }

        return obj;
    }
};

VBDLIS.Global.TrimSign = function (str, noWhiteSpace) {

    if (!str) return "";

    str = str.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, "a");
    str = str.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, "e");
    str = str.replace(/ì|í|ị|ỉ|ĩ/g, "i");
    str = str.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, "o");
    str = str.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, "u");
    str = str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g, "y");
    str = str.replace(/đ/g, "d");

    str = str.replace(/À|Á|Ạ|Ả|Ã|Â|Ầ|Ấ|Ậ|Ẩ|Ẫ|Ă|Ằ|Ắ|Ặ|Ẳ|Ẵ/g, "A");
    str = str.replace(/È|É|Ẹ|Ẻ|Ẽ|Ê|Ề|Ế|Ệ|Ể|Ễ/g, "E");
    str = str.replace(/Ì|Í|Ị|Ỉ|Ĩ/g, "I");
    str = str.replace(/Ò|Ó|Ọ|Ỏ|Õ|Ô|Ồ|Ố|Ộ|Ổ|Ỗ|Ơ|Ờ|Ớ|Ợ|Ở|Ỡ/g, "O");
    str = str.replace(/Ù|Ú|Ụ|Ủ|Ũ|Ư|Ừ|Ứ|Ự|Ử|Ữ/g, "U");
    str = str.replace(/Ỳ|Ý|Ỵ|Ỷ|Ỹ/g, "Y");
    str = str.replace(/Đ/g, "D");

    if (noWhiteSpace) {
        str = str.split(" ").join('');
    }

    return str;
}

//Hàm tạo ra chuỗi thông tin đại diện cho từng node trên jstree
VBDLIS.Global.GetLoaiDoiTuongById = function (doiTuongId) {
    var loaiDoiTuong = {};

    loaiDoiTuong.doiTuongId = doiTuongId;

    if (doiTuongId == 0) {
        loaiDoiTuong.TenMaDoiTuong = "CANHAN";
        loaiDoiTuong.TenDoiTuong = "Cá nhân";
    }
    else if (doiTuongId == 1) {
        loaiDoiTuong.TenMaDoiTuong = "VOCHONG";
        loaiDoiTuong.TenDoiTuong = "Vợ chồng";
    }
    else if (doiTuongId == 2) {
        loaiDoiTuong.TenMaDoiTuong = "HOGIADINH";
        loaiDoiTuong.TenDoiTuong = "Hộ gia đình";
    }
    else if (doiTuongId == 3) {
        loaiDoiTuong.TenMaDoiTuong = "TOCHUC";
        loaiDoiTuong.TenDoiTuong = "Tổ chức";
    }
    else if (doiTuongId == 4) {
        loaiDoiTuong.TenMaDoiTuong = "CONGDONG";
        loaiDoiTuong.TenDoiTuong = "Cộng đồng";
    }
    else if (doiTuongId == 5) {
        loaiDoiTuong.TenMaDoiTuong = "NHOMNGUOI";
        loaiDoiTuong.TenDoiTuong = "Nhóm người";
    }
    else if (doiTuongId == 6) {
        loaiDoiTuong.TenMaDoiTuong = "THUADAT";
        loaiDoiTuong.TenDoiTuong = "Thửa đất";
    }
    else if (doiTuongId == 7) {
        loaiDoiTuong.TenMaDoiTuong = "NHARIENGLE";
        loaiDoiTuong.TenDoiTuong = "Nhà riêng lẻ";
    }
    else if (doiTuongId == 8) {
        loaiDoiTuong.TenMaDoiTuong = "CANHO";
        loaiDoiTuong.TenDoiTuong = "Căn hộ";
    }
    else if (doiTuongId == 9) {
        loaiDoiTuong.TenMaDoiTuong = "NHACHUNGCU";
        loaiDoiTuong.TenDoiTuong = "Nhà chung cư";
    }
    else if (doiTuongId == 10) {
        loaiDoiTuong.TenMaDoiTuong = "KHUCHUNGCU";
        loaiDoiTuong.TenDoiTuong = "Khu chung cư";
    }
    else if (doiTuongId == 11) {
        loaiDoiTuong.TenMaDoiTuong = "CONGTRINHXAYDUNG";
        loaiDoiTuong.TenDoiTuong = "Công trình xây dựng";
    }
    else if (doiTuongId == 12) {
        loaiDoiTuong.TenMaDoiTuong = "CONGTRINHNGAM";
        loaiDoiTuong.TenDoiTuong = "Công trình ngầm";
    }
    else if (doiTuongId == 13) {
        loaiDoiTuong.TenMaDoiTuong = "RUNGTRONG";
        loaiDoiTuong.TenDoiTuong = "Rừng trồng";
    }
    else if (doiTuongId == 14) {
        loaiDoiTuong.TenMaDoiTuong = "CAYLAUNAM";
        loaiDoiTuong.TenDoiTuong = "Cây lâu năm";
    }

    return loaiDoiTuong;
}

VBDLIS.Global.TextGenertor = function (layer, obj) {
    //if (!obj) {
    //    obj = {};
    //} else {
    //    SaveLocalData(layer, obj);
    //}
    var pattern, gioiTinh, Formated;
    switch (layer) {
        case "CANHAN":
            pattern = "Cá nhân - {0}: {1} - Ngày sinh: {2} - Quốc tịch: {3} - Dân tộc: {4}";
            gioiTinh = "Ông";
            if (obj.gioiTinh == 0 || obj.gioiTinh == false) {
                gioiTinh = "Bà";
            }
            var quocTich = VBDLIS.Global.GetQuocTichById(obj.quocTichId1 || obj.quocTichId2);
            var danToc = VBDLIS.Global.GetDanTocById(obj.danTocId);

            var ngaySinh = VBDLIS.Global.TryParseDateTime(obj.ngaySinh);
            Formated = String.format(pattern, gioiTinh, obj.hoTen, ngaySinh, quocTich, danToc);
            break;
        case "NGUONGOCSUDUNG":
            pattern = "Diện tích: {0}m² - Nguồn gốc chi tiết: {1} - Loại nguồn gốc: {2}";
            Formated = String.format(pattern, obj.dienTich, obj.chiTiet, obj.loaiNguonGocSuDungDatId);
            break;
        case "DIACHI":
            pattern = "{0}";
            Formated = String.format(pattern, obj.diaChiChiTiet);
            break;
        case "TAILIEUDODAC":
            pattern = "Loại bản đồ địa chính: {0} - Phương pháp đo: {1} - Đơn vị đo: {2}";
            var tenLoaiBanDoDiaChinh = VBDLIS.Global.GetLoaiBanDoDiaChinhById(obj.loaiBanDoDiaChinhId).tenLoaiBanDoDiaChinh;
            Formated = String.format(pattern, tenLoaiBanDoDiaChinh, obj.phuongPhapDo, obj.donViDoDac);
            break;
        case "GIAYTOTUYTHAN":
            pattern = "Loại giấy tờ:{0} - Số giấy tờ:{1} - Ngày cấp:{2} - Nơi cấp:{3}";
            var loai = VBDLIS.Global.GetLoaiGiayToTuyThanById(obj.loaiGiayToTuyThanId).tenLoaiGiayTo;
            Formated = String.format(pattern, loai, obj.soGiayTo, VBDLIS.Global.TryParseDateTime(obj.ngayCap), obj.noiCap);
            break;
        case "GIAYTOTOCHUC":
            pattern = "Loại tổ chức: {0} - Số giấy tờ: {1} - Ngày cấp: {2} - Nơi cấp: {3}";
            Formated = String.format(pattern, obj.loaiGiayToToChucId, obj.soGiayTo, obj.ngayCap, obj.noiCap);
            break;
        case "MUCDICHSUDUNG":
            pattern = "{0}({1}): Diện tích: {2}m² - Thời hạn sử dụng: {3}";
            Formated = String.format(pattern, obj.LoaiMucDichSuDung != null ? obj.LoaiMucDichSuDung.loaiMucDichSuDungId : obj.loaiMucDichSuDungId, obj.LoaiMucDichSuDung != null ? obj.LoaiMucDichSuDung.tenLoaiMucDichSuDung : obj.loaiMucDichSuDungId, obj.dienTich, obj.thoiHanSuDung);
            break;
        case "TOCHUC":
            var nguoiDaiDien = obj.NguoiDaiDien;
            if (nguoiDaiDien instanceof Array && nguoiDaiDien.length > 0) {
                nguoiDaiDien = nguoiDaiDien[0];
            }


            if (nguoiDaiDien) {
                gioiTinh = "Ông";
                if (nguoiDaiDien.gioiTinh == 0 || nguoiDaiDien.gioiTinh == false) {
                    gioiTinh = "Bà";
                }
                nguoiDaiDien = String.format("{0}: {1}", gioiTinh, nguoiDaiDien.hoTen);
            }
            pattern = "Tổ chức: {0} - Mã định danh: {1} - Người đại diện: {2}";
            Formated = String.format(pattern, obj.tenToChuc, obj.maSoDinhDanh, nguoiDaiDien);
            break;
        case "HOGIADINH":
            pattern = "Hộ gia đình: Chủ hộ: {0} - Số sổ hộ khẩu: {1} - Hồ sơ hộ khẩu số: {2}";
            var tenChuHo = obj.chuHoId;
            if (obj.ChuHo != null && obj.ChuHo.hoTen != "") {
                tenChuHo = obj.ChuHo.hoTen;
            }
            Formated = String.format(pattern, tenChuHo, obj.soSoHoKhau, obj.hoSoHoKhauSo);
            break;
        case "THANHVIENHOGIADINH":
            pattern = "{0}: {1} - Quan hệ với chủ hộ: {2}";
            var hoTen = "";
            gioiTinh = "";
            if (obj.CaNhan) {
                hoTen = obj.CaNhan.hoTen;
                gioiTinh = obj.CaNhan.gioiTinh ? "Ông" : "Bà";
            }
            Formated = String.format(pattern, gioiTinh, hoTen, obj.quanHeVoiChuHo);
            break;
        case "VOCHONG":
            var pattern = "Vợ chồng - Ông: {4} và Bà: {3} - Số GCN kết hôn: {0} - Số quyển: {1} - Thời kiểm hình thành: {2}";
            var hoTenVo = "";
            var hoTenChong = "";
            if (obj.Vo) {
                hoTenVo = obj.Vo.hoTen;
            }
            if (obj.Chong) {
                hoTenChong = obj.Chong.hoTen;
            }
            Formated = String.format(pattern, obj.soGiayChungNhanKetHon, obj.quyenSoGiayChungNhanKetHon, VBDLIS.Global.TryParseDateTime(obj.thoiDiemHinhThanh), hoTenVo, hoTenChong);
            break;
        case "CONGDONG":
            pattern = "Cộng đồng: {0} - Loại giấy tờ: {1} - Số giấy tờ: {2} - Địa danh cư trú: {3}";
            Formated = String.format(pattern, obj.tenCongDong, obj.loaiGiayTo, obj.soGiayTo, obj.diaDanhCuTru);
            break;
        case "THUADAT":
            pattern = "Thửa đất: {0}({1}) - Diện tích: {2}m² - Địa chỉ: {3}";

            var diaChi = "Không có thông tin";
            var thuaDat = obj;

            if (thuaDat && thuaDat.ListDiaChi && thuaDat.ListDiaChi.length > 0) {
                diaChi = thuaDat.ListDiaChi[0].diaChiChiTiet;
            }


            Formated = String.format(pattern, obj.soThuTuThua, obj.soHieuToBanDo, obj.dienTich, diaChi);
            break;
        case "NHARIENGLE":
            pattern = "Nhà riêng lẻ số: {0} - Diện tích xây dựng: {1}m² - Diện tích sàn: {2}m² - Địa chỉ: {3}";
            var diaChi = "Không có thông tin";
            var thuaDat = obj;

            if (thuaDat && thuaDat.ListDiaChi && thuaDat.ListDiaChi.length > 0) {
                diaChi = thuaDat.ListDiaChi[0].diaChiChiTiet;
            }
            Formated = String.format(pattern, obj.soNha, obj.dienTichXayDung, obj.dienTichSan, diaChi);
            break;
        case "HANGMUCNHARIENGLE":
            pattern = "Hạng mục: {0} - Diện tích sàn: {1}m² - Ghi chú: {2}";
            Formated = String.format(pattern, obj.tenHangMucNha, obj.dienTichSan, obj.ghiChu);
            break;
        case "HANGMUCSOHUUCHUNG":
            pattern = "Hạng mục: {0} - Diện tích: {1}m² - Ghi chú: {2}";
            Formated = String.format(pattern, obj.tenHangMuc, obj.dienTich, obj.ghiChu);
            break;
        case "CANHO":
            pattern = "Căn hộ số: {0} {1}- Tầng số: {2} - Diện tích sàn: {3}m² - Diện tích sử dụng: {4}m²";
            Formated = String.format(pattern, obj.soHieuCanHo, obj.nhaChungCu != null ? "chung cư: " + obj.nhaChungCu.tenChungCu + " " : "", obj.tangSo, obj.dienTichSan, obj.dienTichSuDung);
            break;
        case "CONGTRINHXAYDUNG":
            pattern = "Công trình: {0} - Số tầng: {1} - Diện tích xây dựng: {2}m² - Diện tích sàn: {3}m²";
            Formated = String.format(pattern, obj.tenCongTrinh, obj.soTang, obj.dienTichXayDung, obj.dienTichSan);
            break;
        case "HANGMUCCONGTRINH":
            pattern = "Hạng mục: {0} - Công năng: {1} - Kết cấu: {2} - Diện tích xây dựng: {3}m² - Diện tích sàn: {4}m²";
            Formated = String.format(pattern, obj.tenHangMuc, obj.congNang, obj.ketCau, obj.dienTichXayDung, obj.dienTichSan);
            break;
        case "CONGTRINHNGAM":
            pattern = "Công trình ngầm: {0} - Diện tích: {1}m² - Năm xây dựng: {2} - Năm hoàn thành: {3}";
            Formated = String.format(pattern, obj.tenCongTrinh, obj.dienTichCongTrinh, obj.namXayDung, obj.namHoanThanh);
            break;
        case "CAYLAUNAM":
            pattern = "Loại cây: {0} - Diện tích: {1}m² - Địa chỉ: {2}";

            var diaChi = "Không có thông tin";
            var thuaDat = obj;

            if (thuaDat && thuaDat.ListDiaChi && thuaDat.ListDiaChi.length > 0) {
                diaChi = thuaDat.ListDiaChi[0].diaChiChiTiet;
            }

            Formated = String.format(pattern, obj.tenCayLauNam, obj.dienTich, diaChi);
            break;
        case "RUNGTRONG":
            pattern = "Rừng trồng: {0} - Diện tích: {1}m² - Địa chỉ: {2}";

            var diaChi = "Không có thông tin";
            var thuaDat = obj;

            if (thuaDat && thuaDat.ListDiaChi && thuaDat.ListDiaChi.length > 0) {
                diaChi = thuaDat.ListDiaChi[0].diaChiChiTiet;
            }

            Formated = String.format(pattern, obj.tenRung, obj.dienTich, diaChi);
            break;
        case "NHOMNGUOI": {
            pattern = "Nhóm người: Người đại diện:{0}";

            var nguoiDaiDien = obj.NguoiDaiDien;
            if (nguoiDaiDien instanceof Array && nguoiDaiDien.length > 0) {
                nguoiDaiDien = nguoiDaiDien[0];
            }

            if (nguoiDaiDien) {
                if (nguoiDaiDien.loaiDoiTuong == 0) //CaNhan
                {
                    var gioiTinh = "";
                    gioiTinh = nguoiDaiDien.ThongTinChu.gioiTinh ? "Ông" : "Bà";
                    Formated = String.format(pattern, gioiTinh + " " + nguoiDaiDien.ThongTinChu.hoTen)
                }
                else {
                    if (nguoiDaiDien.ThongTinChu) {
                        Formated = String.format("Vợ chồng ông bà: " + nguoiDaiDien.ThongTinChu.Chong.hoTen + " và " + nguoiDaiDien.ThongTinChu.Vo.hoTen)
                    }
                    else {
                        Formated = "Không có người đại diện"
                    }

                }
            }
            break;
        }
        case "LIENKETTAISANTHUADAT":
            pattern = "Thuộc thửa đất: {0}({1}) - Diện tích: {2}m² - Địa chỉ: {3}";
            var diaChi = "Không có thông tin";
            var thuaDat = obj;

            if (obj.thuaDat) {
                thuaDat = obj.thuaDat;
            }

            if (thuaDat && thuaDat.ListDiaChi && thuaDat.ListDiaChi.length > 0) {
                diaChi = thuaDat.ListDiaChi[0].diaChiChiTiet;
            }

            Formated = String.format(pattern, thuaDat.soThuTuThua, thuaDat.soHieuToBanDo, thuaDat.dienTich, diaChi);
            break;
        case "DANGKYTAISAN":
            pattern = "Thông tin đăng ký: <b>{0}</b> - Diện tích: {1}m² - Tỷ lệ: {2} - Ngày bắt đầu: {3} - Ngày kết thúc: {4} - Thời gian sở hữu: {5}";
            var ngayBatDau = VBDLIS.Global.TryParseDateTime(obj.ngayBatDauSoHuu);
            var thoiHanSoHuu = VBDLIS.Global.TryParseDateTime(obj.thoiHanSoHuu);
            Formated = String.format(pattern, (obj.duDieuKienCapGiay ? "Đủ điều kiện" : "Không đủ điều kiện"), obj.dienTich, obj.tyLe, ngayBatDau, thoiHanSoHuu, obj.thoiGianSoHuu);
            break;
        case "GIAYCHUNGNHAN":
            pattern = "Số phát hành: {0} - Số hồ sơ gốc: {1} - Ngày vào sổ: {2} - Mã vạch: {3} - Người ký: {4}";
            var ngayVaoSo = VBDLIS.Global.TryParseDateTime(obj.ngayVaoSo);
            Formated = String.format(pattern, obj.soPhatHanh, obj.soHoSoGoc, ngayVaoSo, obj.maVach, obj.tenNguoiKy);
            break;
        case "NHACHUNGCU":
            pattern = "Tên chung cư: {0} - Tên khu chung cư: {1} - Địa chỉ: {2} - Năm xây dựng: {3}";
            var ngayVaoSo = VBDLIS.Global.TryParseDateTime(obj.ngayVaoSo);

            if (obj && obj.ListDiaChi && obj.ListDiaChi.length > 0) {
                diaChi = obj.ListDiaChi[0].diaChiChiTiet;
            }

            Formated = String.format(pattern, obj.tenChungCu, (obj.khuChungCu && obj.khuChungCu.tenKhu ? obj.khuChungCu.tenKhu : "Không có thông tin"), diaChi, obj.namXayDung);
            break;
        default:
            Formated = layer + " Chưa được định nghĩa";
    }
    return Formated;
};

VBDLIS.Global.BindScriptsDynamic = function (dom, callback) {
    var scripts = dom.find('script');

    var waitAll = 0;
    if (scripts && scripts.length > 0) {
        scripts.each(function (index, script) {
            var urlScr = script.getAttribute('src');

            if (urlScr != null) {
                var fnLoad = urlScr.split('/');
                fnLoad = fnLoad[fnLoad.length - 1].replace('.js', '');
            }
            else {
                waitAll++;
            }


            $.getScript(urlScr).then(function () {
                waitAll++;

                if (typeof (VBDLIS.VModule.VModuleJsLoader[fnLoad]) == 'function') {
                    VBDLIS.VModule.VModuleJsLoader[fnLoad]($(script));
                }

                if (waitAll == scripts.length && typeof (callback) == 'function') {
                    callback();
                    InitControls();
                }

            });
        });

    }
}

VBDLIS.Msg = {
    OK: "OK",
    YESNO: "YESNO",
    WARNING: "exclamation-circle",
    INFO: "info-circle",
    QUESTION: "question-circle",
    ERROR: "times-circle",
    SUCCESS: "check-circle",
    UNSUCCESS: "meh-o",
    show: function (opts) {
        var defaultOpts = {
            title: "Thông báo",
            msg: "",
            errorMsg: "",
            icon: "info-circle",
            buttons: "OK",
            fn: null,
            ajaxErr: false
        };
        opts = $.extend({}, defaultOpts, opts);

        var modal = [];
        var iconColor = "#dddddd"; //default
        if (opts.icon == VBDLIS.Msg.WARNING) {
            iconColor = "orange";
        }
        else if (opts.icon == VBDLIS.Msg.ERROR || opts.icon == VBDLIS.Msg.UNSUCCESS) {
            iconColor = "#e26565";
        }

        modal.push("<div class='modal'  data-keyboard='false'>");
        if (opts.ajaxErr) {
            modal.push("<div class='modal-dialog modal-dialog modal-center modal-95' role='document'>");
        } else {
            modal.push("<div class='modal-dialog modal-dialog modal-center modal-30' role='document'>");
        }
        modal.push("<div class='modal-content'>");
        modal.push("<div class='modal-header'>");
        modal.push("<h4 class='modal-title'>" + (opts.ajaxErr ? "Lỗi máy chủ" : opts.title) + "</h4>");
        modal.push("</div>");
        modal.push("<div class='modal-body'>");
        if (opts.ajaxErr) {
            modal.push("<div style='overflow:auto;max-height:65vh'>");
        } else {
            modal.push("<div style='width:50px; height:50px; display: table-cell; font-size:50px; color: " + iconColor + "'><i class='fa fa-" + opts.icon + "' style='position: absolute; top:10px; opacity: 0.4'></i></div>");
            modal.push("<div style='display: table-cell; text-align: center; vertical-align:middle; padding-left:15px'>");
        }
        modal.push("<p style='font-size:15px'>" + opts.msg + "</p>");
        modal.push("<p style='font-size:15px'>" + opts.errorMsg + "</p>");
        modal.push("</div>");
        modal.push("<div></div>");
        modal.push("</div>");
        modal.push("<div class='modal-footer' style='text-align: center'>");
        modal.push("</div>");
        modal.push("</div>");
        modal.push("</div>");
        modal.push("</div>");

        modal = $(modal.join("")).appendTo($("#dvModalContainer"));

        if (opts.buttons == "OK") {
            modal.find(".modal-footer").append($("<button type='button' class='btn btn-success' value='OK'><i class='fa fa-check-circle'></i> Đồng ý</button>"));

        }
        else if (opts.buttons == "YESNO") {
            modal.find(".modal-footer").append($("<button type='button' class='btn btn-success' value='YES'><i class='fa fa-check-circle'></i> Đồng ý</button>"));
            modal.find(".modal-footer").append($("<button type='button' class='btn' value='NO'><i class='fa fa-times-circle'></i> Không</button>"));
        }
        modal.find(".modal-footer button").click(function () {
            modal.modal("hide");
            modal.remove();

            if (typeof (opts.fn) == "function") {
                opts.fn(this.value);
            }
        });

        modal.modal("show");
    }
};

VBDLIS.VModule.VModuleJsLoader = {};

VBDLIS.VModule.getVModule = function (jObject) {
    var vModule = jObject.closest(".VModule");

    if (vModule[0] != null) {

        if (vModule[0].hasInit) {
            return vModule;
        }

        vModule.mode = "add";

        vModule.VModuleId = vModule.attr("vmodule-id");

        vModule.on("initview", function () {
            if (vModule.onChangeData) {
                vModule.onChangeData();
            }
        });

        vModule.change(function (e) {
            if (e != null && e.target != null && $(e.target).hasClass("VModule")) {
                if (this.value != null && this.value != "") {
                    if (this.value instanceof Array) {
                        vModule.mode = "add";
                    }
                    else {
                        vModule.mode = "update";
                    }
                }
                else {
                    vModule.mode = "add";
                }

                if (this.value != null && this.value != "" && typeof (this.value) == "object") {
                    bindFormData(vModule, this.value);
                }
                else {
                    clearFormData(vModule);
                }


                if (vModule.onChangeData) {
                    vModule.onChangeData();
                }
            }

            return false;
        });

        vModule.saveData = function (fireEvent, mergeMe) {
            var obj = getFormValue(this);

            var currentData = this.val();

            if (vModule.mode == "add") {
                obj._id = new Date().getTime();
            }
            else {
                if (currentData && currentData._id)
                    obj._id = currentData._id;
            }

            if (mergeMe) {
                obj = $.extend({}, obj, mergeMe);
            }

            this[0].value = obj;

            if (typeof (fireEvent) == "undefined" || fireEvent)
                $(this).trigger(vModule.mode + "_data", obj);
        };

        vModule.deleteData = function (fireEvent) {
            vModule;
            var obj = null;
            if (this instanceof jQuery) {
                obj = this.val();
                this[0].value = null;
            }
            else {
                obj = this.value;
                this.value = null;
            }


            if (typeof (fireEvent) == "undefined" || fireEvent)
                $(this).trigger("delete_data", obj);

        };

        vModule.clear = function () {
            clearFormData(vModule);
        };

        vModule[0].hasInit = true; //Chỉ khởi tạo 1 lần
    }
    else {
        console.log("vModule not exist", jObject);
    }



    return vModule;
};
// #endregion

// #region document ready

$(function () {

    // #region Cấu hình mặc định cho các plugins

    //cấu hình tinymce
    if (window.tinyMCE) {
        tinymce.init({
            selector: ".editable",
            //language: "en_US",
            language: "vi_VN",
            height: 200,
            theme: "modern",
            plugins: [
                "advlist autolink lists link charmap print preview hr anchor pagebreak",
                "searchreplace wordcount visualblocks visualchars code fullscreen",
                "insertdatetime nonbreaking save table contextmenu directionality",
                "emoticons template paste textcolor colorpicker textpattern"
            ],
            toolbar1: "insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image",
            toolbar2: "print preview media | forecolor backcolor emoticons",
            image_advtab: true,
            templates: [
                { title: "Test template 1", content: "Test 1" },
                { title: "Test template 2", content: "Test 2" }
            ],
            content_css: [
                "../../Assets/plugins/tinymce/codepen.min.css"
            ],
            force_br_newlines: true,
            force_p_newlines: false,
            forced_root_block: false
        });
    }

    //Lobibox
    if (Lobibox) {
        Lobibox.base.OPTIONS = $.extend({}, Lobibox.base.OPTIONS, {
            buttons: {
                ok: {
                    "class": "lobibox-btn lobibox-btn-default",
                    text: "OK",
                    closeOnClick: true
                },
                cancel: {
                    "class": "lobibox-btn lobibox-btn-cancel",
                    text: "Đóng",
                    closeOnClick: true
                },
                yes: {
                    "class": "btn btn-primary",
                    text: "Đồng ý",
                    closeOnClick: true
                },
                no: {
                    "class": "btn btn-danger",
                    text: "Hủy",
                    closeOnClick: true
                }
            }
        });
    }

    //cấu hình mặc định cho datepicker và timepicker
    if ($.datepicker) {
        $.datepicker.setDefaults({
            currentText: "Hiện tại",
            closeText: "Đóng",
            autoSize: false,
            showButtonPanel: true,
            //showOn: "both",
            changeMonth: true,
            changeYear: true,
            prevText: "&#x3C;Trước",
            nextText: "Tiếp&#x3E;",
            monthNames: ["Tháng Một", "Tháng Hai", "Tháng Ba", "Tháng Tư", "Tháng Năm", "Tháng Sáu",
                "Tháng Bảy", "Tháng Tám", "Tháng Chín", "Tháng Mười", "Tháng Mười Một", "Tháng Mười Hai"],
            monthNamesShort: ["Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6",
                "Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12"],
            dayNames: ["Chủ Nhật", "Thứ Hai", "Thứ Ba", "Thứ Tư", "Thứ Năm", "Thứ Sáu", "Thứ Bảy"],
            dayNamesShort: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
            dayNamesMin: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
            weekHeader: "Tu",
            dateFormat: "dd/mm/yy",
            firstDay: 0,
            isRTL: false,
            showMonthAfterYear: false,
            yearSuffix: "",
            duration: "fast",
            hideIfNoPrevNext: true,
            numberOfMonths: 1,
            showWeek: true,
            yearRange: "1900:2099"
            //altField: "#alternate",
            //altFormat: "DD, d MM, yy"
        });
        //cấu hình datepicker
        $(".datepicker").datepicker({
            beforeShow: function () {
                setTimeout(function () {
                    $('.ui-datepicker').css('z-index', 999999);
                }, 0);
            }
        }).inputmask("dd/mm/yyyy", { placeholder: "__/__/____" });
        $(".datepicker-from").datepicker({
            onSelect: function (selectedDateTime) {
                $(".datepicker-to").datepicker("option", "minDate", $(".datepicker-from").datepicker("getDate"));
            },
            beforeShow: function () {
                setTimeout(function () {
                    $('.ui-datepicker').css('z-index', 999999);
                }, 0);
            }
        }).inputmask("dd/mm/yyyy", { placeholder: "__/__/____" });
        $(".datepicker-to").datepicker({
            onSelect: function (selectedDateTime) {
                $(".datepicker-from").datepicker("option", "maxDate", $(".datepicker-to").datepicker("getDate"));
            },
            beforeShow: function () {
                setTimeout(function () {
                    $('.ui-datepicker').css('z-index', 999999);
                }, 0);
            }
        }).inputmask("dd/mm/yyyy", { placeholder: "__/__/____" });
        //ấn nút Hôm nay tự động chọn ngày hôm nay
        $.datepicker._gotoToday = function (id) {
            //var inst = this._getInst($(id)[0]);
            //var date = new Date();
            //this._selectDay(id, date.getMonth(), date.getFullYear(), inst.dpDiv.find("td.ui-datepicker-today"));
            $(id).datepicker("setDate", new Date()).datepicker("hide").blur();
        };
    }
    if ($.timepicker) {
        $.timepicker.setDefaults({
            currentText: "Hiện tại",
            closeText: "Đóng",
            timeOnlyTitle: "Chọn giờ",
            timeText: "Thời gian",
            hourText: "Giờ",
            minuteText: "Phút",
            secondText: "Giây",
            millisecText: "Mili giây",
            microsecText: "Micrô giây",
            timezoneText: "Múi giờ",
            controlType: "select",
            oneLine: true,
            timeInput: true,
            //timeFormat: "hh:mm tt",
            timeSuffix: "",
            amNames: ["sáng", "S"],
            pmNames: ["chiều", "C"],
            isRTL: false
        });
        //cấu hình datetimepicker
        $(".datetimepicker").datetimepicker();
        $(".datetimepicker-from").datetimepicker({
            onSelect: function (selectedDateTime) {
                $(".datetimepicker-to").datetimepicker("option", "minDate", $(".datetimepicker-from").datetimepicker("getDate"));
            }
        });
        $(".datetimepicker-to").datetimepicker({
            onSelect: function (selectedDateTime) {
                $(".datetimepicker-from").datetimepicker("option", "maxDate", $(".datetimepicker-to").datetimepicker("getDate"));
            }
        });
    }

    //cấu hình validator
    if ($().validate) {
        $.validator.addMethod("date", function (value, element) {
            return this.optional(element) || moment(value, "DD/MM/YYYY").isValid();
        }, "Vui lòng nhập theo định dạng dd/mm/yyyy");
        $.extend($.validator.messages, {
            required: "Dữ liệu không được để trống.",
            email: "Vui lòng nhập email hợp lệ.",
            number: "Số không hợp lệ",
            digits: "Số không hợp lệ."
        });
    }

    //cấu hình datatable
    if ($.fn.dataTable) {
        $.fn.dataTable.ext.errMode = "none";
        $("table").css({ "width": "100%" });
        if ($(".dataTables_filter").length) {
            $(".CreateButton").insertBefore(".dataTables_filter");
        }
        else if ($(".btn-top-table").length) {
            $(".dataTables_length").css({ "text-align": "left" });
            $(".btn-top-table").appendTo($(".dataTables_length").parent().siblings(".col-md-6"));
        }
    }

    //cấu hình modal
    if ($.fn.modal) {
        $.fn.modal.Constructor.DEFAULTS.keyboard = false;
        $.fn.modal.Constructor.DEFAULTS.backdrop = "static";
        $(".modal").appendTo($("#dvModalContainer"));
        $("#dvModalContainer .modal").each(function () {
            if ($(".modal[id=" + $(this).prop("id") + "]").length > 1) {
                $.each($(".modal[id=" + $(this).prop("id") + "]"), function (index, value) {
                    $(this).prop("id", $(this).prop("id") + "_" + (index + 1).toString());
                });
            }
        });
    }

    //cấu hình trường mật khẩu
    if ($.fn.password) {
        $(".password").password({
            message: "Click để hiện/ẩn mật khẩu"
        });
        $(".input-append").css({ "width": "100%" });
    }

    //cấu hình select2
    if ($().select2) {
        $(".select2").select2({ dropdownCssClass: "dynamic-select2", allowClear: false, width: "100%" }).change(function () {
            var value = this.value;
            var displayValue = $(this).find('option[value="' + value + '"]').text();
            $(this).attr('display-value', displayValue);
        });
    }

    //cấu hình tooltipster
    if ($().tooltipster) {
        $(".tooltip").tooltipster({
            delay: 0
        });
        $(".tooltip-btn").tooltipster({
            delay: 0,
            animation: "grow"
        });
    }

    //cấu hình mask
    if ($().inputmask) {
        $(".money").inputmask("integer", { groupSeparator: ",", autoGroup: true, suffix: " đồng", removeMaskOnSubmit: true, autoUnmask: true });
        $(".number").inputmask("integer", { rightAlign: false });
        $(".area").inputmask("decimal", { groupSeparator: ",", autoGroup: true, rightAlign: false, digits: 1, suffix: " m\u00B2", removeMaskOnSubmit: true, autoUnmask: true });
    }

    // #endregion
});

// #endregion

// #region anonymous functions

// #region Thư viện CRUD offline
function checkLocalExist(collectionName) {
    if (localDB.getCollection(collectionName) === null) {
        return false;
    } else {
        return true;
    }
}
function saveToLocal(collectionName, docData) {
    var collection = localDB.getCollection(collectionName);
    if (collection === null) {
        collection = localDB.addCollection(collectionName);
    }
    collection.clear({ removeIndices: true });
    var doc = collection.insert(docData);
    try {
        collection.update(doc);
    } catch (err) {
        alertify.warning("tl", err);
    }
}
function getFromLocal(collectionName) {
    return localDB.getCollection(collectionName).data[0];
}

function capNhatDanhMuc(dataDanhMuc) {
    VBDLIS.Global.DANTOC = dataDanhMuc.DanTocs || _DANTOC;
    VBDLIS.Global.DISTRICT = dataDanhMuc.Districts;
    VBDLIS.Global.LOAIBANDODIACHINH = dataDanhMuc.LoaiBanDoDiaChinhs;
    VBDLIS.Global.LOAIBIENDONG = dataDanhMuc.LoaiBienDongs;
    VBDLIS.Global.LOAICAPCONGTRINH = dataDanhMuc.LoaiCapCongTrinhs;
    VBDLIS.Global.LOAICAPNHA = dataDanhMuc.LoaiCapNhas;
    VBDLIS.Global.LOAICONGTRINHNGAM = dataDanhMuc.LoaiCongTrinhNgams;
    VBDLIS.Global.LOAIDOITUONG = dataDanhMuc.LoaiDoiTuongs;
    VBDLIS.Global.LOAIGIAYCHUNGNHAN = dataDanhMuc.LoaiGiayChungNhans;
    VBDLIS.Global.LOAIGIAYTODINHKEM = dataDanhMuc.LoaiGiayToDinhKems;
    VBDLIS.Global.LOAIGIAYTOTOCHUC = dataDanhMuc.LoaiGiayToToChucs;
    VBDLIS.Global.LOAIGIAYTOTUYTHAN = dataDanhMuc.LoaiGiayToTuyThans;
    VBDLIS.Global.LOAIMUCDICHSUDUNG = dataDanhMuc.LoaiMucDichSuDungs;
    VBDLIS.Global.LOAINGUONGOCSUDUNGDAT = dataDanhMuc.LoaiNguonGocSuDungDats;
    VBDLIS.Global.LOAINHARIENGLE = dataDanhMuc.LoaiNhaRiengLes;
    VBDLIS.Global.LOAITOCHUC = dataDanhMuc.LoaiToChucs;
    VBDLIS.Global.PROVINCE = dataDanhMuc.Provinces;
    VBDLIS.Global.QUOCTICH = dataDanhMuc.QuocTichs || _QUOCGIA;
    VBDLIS.Global.WARD = dataDanhMuc.Wards;

}
//// #endregion

//reset input trong form, ví dụ: ClearChildrenByType(document.getElementById("processChuSuDung"));
function ClearChildrenByType(element) {
    for (var i = 0; i < element.childNodes.length; i++) {
        var e = element.childNodes[i];
        if (e.tagName) switch (e.tagName.toLowerCase()) {
            case "input":
                switch (e.type) {
                    case "radio":
                    case "checkbox": e.checked = false; break;
                    case "button":
                    case "submit":
                    case "image": break;
                    default: e.value = ""; break;
                }
                break;
            case "select": e.selectedIndex = 0; break;
            case "textarea": e.value = ""; break;
            default: ClearChildrenByType(e);
        }
    }
}

//reset select2 trong form, ví dụ ClearChildrenSelect2ById("ddlQuanHuyen")
function ClearChildrenSelect2ById(id) {
    $("#" + id).val("0").change();
}

//canh giữa modals
function centerModal() {
    $(".modal.in").each(function (index, value) {
        var $dialog = $(this).find(".modal-dialog.modal-center"),
            offset = ($(window).height() - $dialog.height()) / 2;
        if (offset >= 0 && offset <= 20) {
            $(this).css("top", "auto");
        } else {
            $(this).css("top", 0);
        }
        if (offset < 0) {
            offset = 0;
        }
        $dialog.css("margin-top", Math.floor(offset));
        $dialog.css("margin-bottom", 0);
    });
    $("table").css({ "width": "100%" });
}

//đóng tất cả modal đang mở
function CloseAllModal() {
    $(".modal.in").each(function (index, value) {
        $(this).modal("hide");
    });
}
//Pulsate
function Pulsate(id) {
    $(id).pulsate({
        color: "#bf1c56", // set the color of the pulse
        reach: 20,                              // how far the pulse goes in px
        speed: 1000,                            // how long one pulse takes in ms
        pause: 0,                               // how long the pause between pulses is in ms
        glow: true,                             // if the glow should be shown too
        repeat: 3,                           // will repeat forever if true, if given a number will repeat for that many times
        onHover: false                          // if true only pulsate if user hovers over the element
    });
}

//Loading
function loading(show) {
    if (show)
        $("body").loadingModal({
            position: "auto",
            text: "Đang xử lý...",
            color: "#fff",
            opacity: "0.7",
            backgroundColor: "rgb(0,0,0)",
            animation: "fadingCircle"
        });
    else
        $("body").loadingModal("destroy");
}
//Xử lý ajax error
function OnError(xhr, errorType, exception) {
    loading(false);
    var responseText;
    var showText = "";
    try {
        responseText = jQuery.parseJSON(xhr.responseText);
        showText += "<div><div><b>" + errorType + " " + exception + "</b></div>";
        showText += "<div><u>Exception</u>:<br /><br />" + responseText.ExceptionType + "</div>";
        showText += "<div><u>StackTrace</u>:<br /><br />" + responseText.StackTrace + "</div>";
        showText += "<div><u>Message</u>:<br /><br />" + responseText.Message + "</div></div>";
    } catch (e) {
        responseText = xhr.responseText.replace(".7em", "13px").replace("<pre>", "").replace("</pre>", "");
        showText = responseText;
    }
    VBDLIS.Msg.show({ msg: showText, icon: VBDLIS.Msg.UNSUCCESS, ajaxErr: true });
}

//Chuyển đổi ngày tháng
function DateTimeConvert(string, options) {
    var settings = $.extend({
        time: false
    }, options);
    var date;
    var daysname = ["Chủ nhật", "Thứ hai", "Thứ ba", "Thứ tư", "Thứ năm", "Thứ sáu", "Thứ bảy"];
    var monthsname = ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];
    if (Object.prototype.toString.call(string) === "[object String]" && !/[a-z]/.test(string.toLowerCase())) {
        date = new Date(parseInt(string));
    } else {
        date = new Date(string);
    }
    var month = date.getMonth();
    var hours = date.getHours();
    var minutes = date.getMinutes();
    var am = true;
    //if (hours > 12) {
    //    am = false;
    //    hours -= 12;
    //} else if (hours == 12) {
    //    am = false;
    //} else if (hours == 0) {
    //    hours = 0;
    //}
    var result = "";
    if (settings.time) {
        result += (date.getDate() < 10 ? "0" : "") + date.getDate() + "/" + monthsname[month] + "/" + date.getFullYear() + " " + (hours < 10 ? "0" : "") + hours + ":" + (minutes < 10 ? "0" : "") + minutes;
    } else {
        result += (date.getDate() < 10 ? "0" : "") + date.getDate() + "/" + monthsname[month] + "/" + date.getFullYear();
    }
    return result;
}

//convert val từ datepicker sang dạng mm/dd/yy
//ví dụ GetDefaultDate("#txtNgayTimKiemTu");
function GetDefaultDate(id) {
    return $.datepicker.formatDate("dd/mm/yy", $(id).datepicker("getDate"));
}

//Ẩn hiện table nếu tìm kiếm bên ngoài
//ví dụ ToggleSearchResult(CustomSearch, settings.aoData.length);
function ToggleSearchResult(customSearch, result) {
    if (customSearch) {
        if (result < 1) {
            $("#dvKetQuaTimKiemEmpty").css({ "display": "block" });
            $("#dvKetQuaTimKiem").css({ "visibility": "hidden" });
        }
        else {
            $("#dvKetQuaTimKiemEmpty").css({ "display": "none" });
            $("#dvKetQuaTimKiem").css({ "visibility": "visible" });
        }
    }
    CustomSearch = false;
}

//confirm
function Confirm(message, functionName) {
    $.confirm({
        title: "Xác nhận",
        text: message,
        confirmButton: "Đồng ý",
        cancelButton: "Thoát",
        confirm: function () {
            functionName();
        },
        cancel: function () {
        }
    });
}

//thêm dấu phẩy cho số, ví dụ AddCommas(123456) hoặc AddCommas("123456")
function AddCommas(nStr) {
    nStr += "";
    var x = nStr.split(".");
    var x1 = x[0];
    var x2 = x.length > 1 ? "." + x[1] : "";
    var rgx = /(\d+)(\d{3})/;
    while (rgx.test(x1)) {
        x1 = x1.replace(rgx, "$1" + "," + "$2");
    }
    return x1 + x2;
}

//Set content tinymce
function SetContentTinymce(control, content) {
    tinymce.get(control).setContent(content);
}

//Get content tinymce
function GetContentTinymce(control) {
    return tinymce.get(control).getContent({ format: "raw" });
}

//HTML string sang javascript var, ví dụ DomToVar(document.getElementById("data_table").innerHTML); document.body.innerHTML += encoded; alert(unescape(encoded));
function DomToVar(html) {
    encodedHtml = escape(html);
    encodedHtml = encodedHtml.replace(/\//g, "%2F");
    encodedHtml = encodedHtml.replace(/\?/g, "%3F");
    encodedHtml = encodedHtml.replace(/=/g, "%3D");
    encodedHtml = encodedHtml.replace(/&/g, "%26");
    encodedHtml = encodedHtml.replace(/@@/g, "%40");
    return encodedHtml;
}

//lọc mảng đơn thành các phần tử độc nhất
function ArrNoDupe(a) {
    var temp = {};
    for (var i = 0; i < a.length; i++)
        temp[a[i]] = true;
    return Object.keys(temp);
}

//lọc mảng đa thành các phần tử độc nhất
function ArrMulNoDupe(a) {
    var flags = [], output = [];
    for (var i = 0; i < a.length; i++) {
        if (flags[a[i].id]) continue;
        flags[a[i].id] = true;
        output.push(a[i]);
    }
    return output;
}

// Convert array to object
function ConvertToObj(array) {
    var thisEleObj = new Object();
    if (typeof array === "object") {
        for (var i in array) {
            var thisEle;
            thisEle = ConvertToObj(array[i]);
            if (!IsEmpty(thisEle)) {
                thisEleObj[i] = thisEle;
            }
            else {
                thisEleObj[i] = null;
            }
        }
    } else {
        thisEleObj = array;
    }
    return thisEleObj;
}

//chuyển tiếng việt có dấu thành không dấu
function ConvertToEn(str, options) {
    var settings = $.extend({
        lower: false,
        removespaces: false
    }, options);
    if (settings.lower) {
        str = str.toLowerCase();
    }
    // In thường
    str = str.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, "a");
    str = str.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, "e");
    str = str.replace(/ì|í|ị|ỉ|ĩ/g, "i");
    str = str.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, "o");
    str = str.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, "u");
    str = str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g, "y");
    str = str.replace(/đ/g, "d");
    // In hoa
    str = str.replace(/À|Á|Ạ|Ả|Ã|Â|Ầ|Á|Ậ|Ẩ|Ẫ|Ă|Ằ|Á|Ặ|Ẳ|Ẵ/g, "a");
    str = str.replace(/È|É|Ẹ|Ẻ|Ẽ|Ê|Ề|Ế|Ệ|Ể|Ễ/g, "e");
    str = str.replace(/Ì|Í|Ị|Ỉ|Ĩ/g, "i");
    str = str.replace(/Ò|Ó|Ọ|Ỏ|Õ|Ô|Ồ|Ố|Ộ|Ổ|Ỗ|Ơ|Ờ|Ớ|Ợ|Ở|Ỡ/g, "o");
    str = str.replace(/Ù|Ú|Ụ|Ủ|Ũ|Ư|Ừ|Ứ|Ự|Ử|Ữ/g, "u");
    str = str.replace(/Ỳ|Ý|Ỵ|Ỷ|Ỹ/g, "y");
    str = str.replace(/Đ/g, "d");
    if (settings.removespaces) {
        str = str.replace(/\s/g, "");
    }
    return str; // Trả về chuỗi đã chuyển
}

//Check string có phải GUID hay không
function IsGuid(stringToTest) {
    if (stringToTest[0] === "{") {
        stringToTest = stringToTest.substring(1, stringToTest.length - 1);
    }
    var regexGuid = /^(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}$/gi;
    return regexGuid.test(stringToTest);
}

//Check object có empty hay không
function IsEmpty(obj) {
    for (var prop in obj) {
        if (obj.hasOwnProperty(prop))
            return false;
    }

    return JSON.stringify(obj) === JSON.stringify({});
}

//chuyển chuỗi mật khẩu thành asterisk
function ReplaceLetters(s) {
    return s.replace(/./g, "*");
}

//toggle ẩn hiện onclick="toggle('.tach-tu-dong', this)"
function toggle(className, obj) {
    var $input = $(obj);
    if ($input.prop('checked')) $(className).show();
    else $(className).hide();
}

//hàm làm tròn
function round(value, precision, isRound) {
    var multiplier = Math.pow(10, precision || 0)
    if (isRound)
        return Math.round(value * multiplier) / multiplier;
    return Math.floor(value * multiplier) / multiplier;
}

function formValidationErrorPlacement(error, element) {
    var _popover;
    _popover = $(element).popover({
        trigger: "manual",
        placement: "auto",
        container: "body",
        animation: false,
        content: $(error).text(),
        template: "<div class='popover'><div class='arrow'></div><div class='popover-inner'><div class='popover-content'><p></p></div></div></div>"
    });
    _popover.data("bs.popover").options.content = $(error).text();
    $(element).popover("show");
    return setTimeout(function () { $(element).popover("hide"); }, 2000);
}
// #endregion

// #region  self invoked anonymous functions

var InitControls = function () {
    $(".modal").appendTo($("#dvModalContainer"));
    $("#dvModalContainer .modal").each(function () {
        if ($(".modal[id=" + $(this).prop("id") + "]").length > 1) {
            $.each($(".modal[id=" + $(this).prop("id") + "]"), function (index, value) {
                $(this).prop("id", $(this).prop("id") + "_" + (index + 1).toString());
            });
        }
    });


    jQuery.validator.addMethod("validDate", function (value, element) {
        return this.optional(element) || moment(value, "DD/MM/YYYY").isValid();
    }, "Vui lòng nhập theo định dạng dd/mm/yy");

    //cấu hình datepicker
    $(".datepicker").datepicker({
        beforeShow: function () {
            setTimeout(function () {
                $('.ui-datepicker').css('z-index', 999999);
            }, 0);
        }
    }).inputmask("dd/mm/yyyy", { placeholder: "__/__/____" });
    $(".datepicker-from").datepicker({
        onSelect: function (selectedDateTime) {
            $(".datepicker-to").datepicker("option", "minDate", $(".datepicker-from").datepicker("getDate"));
        },
        beforeShow: function () {
            setTimeout(function () {
                $('.ui-datepicker').css('z-index', 999999);
            }, 0);
        }
    }).inputmask("dd/mm/yyyy", { placeholder: "__/__/____" });
    $(".datepicker-to").datepicker({
        onSelect: function (selectedDateTime) {
            $(".datepicker-from").datepicker("option", "maxDate", $(".datepicker-to").datepicker("getDate"));
        },
        beforeShow: function () {
            setTimeout(function () {
                $('.ui-datepicker').css('z-index', 999999);
            }, 0);
        }
    }).inputmask("dd/mm/yyyy", { placeholder: "__/__/____" });
    //ấn nút Hôm nay tự động chọn ngày hôm nay
    $.datepicker._gotoToday = function (id) {
        //var inst = this._getInst($(id)[0]);
        //var date = new Date();
        //this._selectDay(id, date.getMonth(), date.getFullYear(), inst.dpDiv.find("td.ui-datepicker-today"));
        $(id).datepicker("setDate", new Date()).datepicker("hide").blur();
    };
    $(".money").inputmask("integer", { groupSeparator: ",", autoGroup: true, suffix: " đồng", removeMaskOnSubmit: true, autoUnmask: true });
    $(".number").inputmask("integer", { rightAlign: false });
    $(".area").inputmask("decimal", { groupSeparator: ",", autoGroup: true, rightAlign: false, digits: 1, suffix: " m\u00B2", removeMaskOnSubmit: true, autoUnmask: true });

    //$("select[data-type="combobox-sugestion"]").select2(); //Lỗi giao diện do thay đổi code. Tạm thời bỏ

    //cấu hình select2
    if ($().select2) {
        $(".select2").select2({ dropdownCssClass: "dynamic-select2", allowClear: false, width: "100%" }).change(function () {
            var value = this.value;
            var displayValue = $(this).find('option[value="' + value + '"]').text();
            $(this).attr('display-value', displayValue);
        });
    }

};

//cấu hình modal
//modal.[add,edit,remove]("modalId",name);
//ví dụ modal.add("mdlChiTietCaNhan", "cá nhân");
var modal = function () {
    return {
        add: function (id, text) {
            ResetChildrenByType(document.getElementById(id));
            ResetChildrenSelect2ById(id);
            $("#" + id + "").removeClass().addClass("modal Add");
            $("#" + id + "").find(".panel-body > div.row > div:first-child").show();
            $("#" + id + "").find(".panel-body > div.row > div:last-child").hide();
            $("#" + id + "").find(".panel").removeClass().addClass("panel panel-primary");
            $("#" + id + "").find(".panel-title > span").text("Thêm " + text + "");
            $("#" + id + "").find(".panel-footer .pull-right > a:first-child").html("<i class='fa fa-plus'></i> Lưu").removeClass().addClass("btn btn-primary hover-effect BindButton").show();
            $("#" + id + "").find(".panel-footer .pull-right > a:nth-child(2)").hide();
        },
        edit: function (id, text) {
            $("#" + id + "").removeClass().addClass("modal Edit");
            $("#" + id + "").find(".panel-body > div.row > div:first-child").show();
            $("#" + id + "").find(".panel-body > div.row > div:last-child").hide();
            $("#" + id + "").find(".panel").removeClass().addClass("panel panel-success");
            $("#" + id + "").find(".panel-title > span").text("Sửa " + text + "");
            $("#" + id + "").find(".panel-footer .pull-right > a:first-child").html("<i class='fa fa-edit'></i> Cập nhật").removeClass().addClass("btn btn-success hover-effect BindButton").show();
            $("#" + id + "").find(".panel-footer .pull-right > a:nth-child(2)").hide();
        },
        remove: function (id, text) {
            $("#" + id + "").removeClass().addClass("modal Remove");
            $("#" + id + "").find(".panel-body > div.row > div:first-child").hide();
            $("#" + id + "").find(".panel-body > div.row > div:last-child").html("<h4><b>Bạn chắc chắn muốn xóa " + text + " này?</b></h4>").show();
            $("#" + id + "").find(".panel").removeClass().addClass("panel panel-danger");
            $("#" + id + "").find(".panel-title > span").text("Xóa " + text + "");
            $("#" + id + "").find(".panel-footer .pull-right > a:first-child").hide();
            $("#" + id + "").find(".panel-footer .pull-right > a:nth-child(2)").html("<i class='fa fa-trash-o'></i> Đồng ý").removeClass().addClass("btn btn-danger hover-effect BindButton").show();
        }
    };
}();

//cấu hình alertify
//alertify.[default,info,warning,error,success]("[tl,tr,tc,bl,br]", message)
var alertify = function () {
    function AlertifyNotify(type, pos, mes) {
        var msgtitle = "";
        switch (type) {
            case "default":
                msgtitle = "Thông báo";
                break;
            case "info":
                msgtitle = "Thông tin";
                break;
            case "warning":
                msgtitle = "Cảnh báo";
                break;
            case "error":
                msgtitle = "Thất bại";
                break;
            case "success":
                msgtitle = "Thành công";
                break;
        }
        switch (pos) {
            case "tc":
                pos = "top center";
                break;
            case "tl":
                pos = "top left";
                break;
            case "tr":
                pos = "top right";
                break;
            case "bl":
                pos = "bottom left";
                break;
            case "br":
                pos = "bottom right";
                break;
        }
        Lobibox.notify(type, {
            sound: false,
            delayIndicator: true,
            position: pos,
            title: msgtitle,
            msg: mes,
            messageHeight: "auto"
        }).$el.css("word-wrap", "break-word");
    }
    function AlertifyConfirm(mes, yescallback, nocallback) {
        //$.confirm({
        //    title: "Xác nhận",
        //    text: mes,
        //    confirmButton: "Đồng ý",
        //    cancelButton: "Thoát",
        //    confirm: function () {
        //        if (typeof yescallback === "function") {
        //            yescallback.call(this);
        //        }
        //    },
        //    cancel: function () {
        //        if (!nocallback) {
        //            return false;
        //        } else {
        //            if (typeof nocallback === "function") {
        //                nocallback.call(this);
        //            }
        //        }
        //    }
        //});
        Lobibox.confirm({
            //iconClass: false,
            title: "Xác nhận",
            msg: mes,
            callback: function ($this, type, ev) {
                if (type === "yes") {
                    if (typeof yescallback === "function") {
                        yescallback.call(this);
                    }
                } else if (type === "no") {
                    if (!nocallback) {
                        return false;
                    } else {
                        if (typeof nocallback === "function") {
                            nocallback.call(this);
                        }
                    }
                }
            }
        });
    }
    function AlertifyAlert(mes, options) {
        var settings = $.extend({}, options);
        var buttonsList = {};
        var buttonStyle = loopArr(["primary", "warning", "danger", "default", "success", "info"], { loop: true });
        $.each(settings, function (index, value) {
            var indexNew = ConvertToEn(index, { lower: true, removespaces: true });
            //if (index === Object.keys(settings)[Object.keys(settings).length - 1])
            buttonsList[indexNew] = { "class": "btn btn-" + buttonStyle.next(), closeOnClick: true, text: index };
        });
        Lobibox.alert("info", {
            msg: mes,
            title: "Thông báo",
            //buttons: ['ok', 'cancel', 'yes', 'no'],
            //Or more powerfull way
            buttons: buttonsList,
            callback: function (lobibox, type) {
                for (key in settings) {
                    if (type === ConvertToEn(key, { lower: true, removespaces: true })) {
                        settings[key]();
                    }
                }
            }
        });
    }
    return {
        default: function (pos, mes) {
            AlertifyNotify("default", pos, mes);
        },
        info: function (pos, mes) {
            AlertifyNotify("info", pos, mes);
        },
        warning: function (pos, mes) {
            AlertifyNotify("warning", pos, mes);
        },
        error: function (pos, mes) {
            AlertifyNotify("error", pos, mes);
        },
        success: function (pos, mes) {
            AlertifyNotify("success", pos, mes);
        },
        confirm: function (mes, yescallback, nocallback) {
            AlertifyConfirm(mes, yescallback, nocallback);
        },
        alert: function (mes, options) {
            AlertifyAlert(mes, options);
        }
    };
}();

//chuyển mảng thành vòng lặp để lấy giá trị lần lượt hoặc ngẫu nhiên next, prev, cur và ran
var loopArr = function (arr, options) {
    var settings = $.extend({
        loop: false
    }, options);
    var cur = 0;
    arr.next = (function () { return (++cur >= this.length) ? (settings.loop ? this[0] : false) : this[cur]; });
    arr.prev = (function () { return (--cur < 0) ? false : this[cur]; });
    arr.cur = (function () { return this[cur]; });
    arr.ran = (function () { return this[Math.floor(Math.random() * this.length)]; });
    return arr;
};
// #endregion

// #region self invoked anonymous functions with a parameter called "$"
(function ($) {

    //Vô hiệu hóa modal khi xử lý
    $.fn.mask = function (text) {

        if (!text) {
            text = "Đang tải...";
        }

        var spanMsg = $("<span class='x-mask-msg' style='position: absolute;background-color: #e5e5e5'><i class='fa fa-spin fa-spinner'></i> " + text + "</span>");
        var divStyle = "text-align: center;z-index: 100;position: absolute;width: 100%;height: 100%;zoom: 1;background: white;opacity: .7;left: 0; top: 0";
        var mask = $("<div class='x-mask' style='" + divStyle + "'></div>").append(spanMsg);

        var resizeContent = function () {
            var height = mask.height();
            var msgHeight = spanMsg.height();

            var marginTopMsg = Math.floor(height / 2) - Math.floor(msgHeight / 2);

            spanMsg.css("margin-top", marginTopMsg + "px");
        };

        this.append(mask);

        resizeContent();
    };

    //Bỏ vô hiệu hóa modal khi xử lý
    $.fn.unmask = function () {
        this.find(".x-mask").remove();
    };
    //Kết hợp dữ liệu các phần tử và gộp vào phần tử đầu tiên
    //ví dụ $("CaNhan, DiaChi, GiayToTuyThan").collectData({ stringify: true, object: true });
    $.fn.collectData = function (options) {
        var settings = $.extend({
            stringify: false,
            object: false
        }, options);
        var data = this.selector.split(", ");
        var mainObj = $(data[0]).getSavedData();
        for (var i = 1; i < data.length; i++) {
            var name = data[i];
            var value = $(data[i]).getSavedData();
            mainObj[name] = value;
        }

        if (settings.object) {
            if (settings.stringify) {
                return JSON.stringify(ConvertToObj(mainObj));
            } else {
                return ConvertToObj(mainObj);
            }
        } else {
            if (settings.stringify) {
                return JSON.stringify(mainObj);
            } else {
                return mainObj;
            }
        }
    };

    //Tạo Array/Object và xuất String từ dữ liệu offline
    //xxx.getSavedData({ stringify: true, object: true })
    //$.fn.getSavedData = function (options) {
    //    var settings = $.extend({
    //        stringify: false,
    //        object: false
    //    }, options);
    //    var collection = db.getCollection(this.selector);
    //    var list = collection.find();
    //    var data = [];
    //    $.each(list, function (index, value) {
    //        delete value["$loki"];
    //        delete value["meta"];
    //        delete value["VirtualParent"];
    //        data.push(value);
    //    });
    //    if (settings.object) {
    //        if (settings.stringify) {
    //            return JSON.stringify(ConvertToObj(data));
    //        } else {
    //            return ConvertToObj(data);
    //        }
    //    } else {
    //        if (settings.stringify) {
    //            return JSON.stringify(data);
    //        } else {
    //            return data;
    //        }
    //    }
    //};

    //Chuyển đổi Form thành Json
    //xxx.formToJson({ stringify: true }, function (key, val) {
    //    return {
    //        name: key,
    //        value: encodeURIComponent(val)
    //    };
    //})
    $.fn.formToJson = function (options, decorator) {
        var settings = $.extend({
            stringify: false
        }, options);
        var obj = {},
            arr = this.serializeArray({ checkboxesAsBools: true }),
            that;
        $.each(arr, function () {
            that = this;
            if ($.isFunction(decorator)) {
                that = decorator(that.name, that.value);
            }
            if (obj[this.name] !== undefined) {
                if (!obj[that.name].push) {
                    obj[that.name] = [obj[that.name]];
                }
                obj[that.name].push(that.value || "");
            } else {
                obj[that.name] = that.value || "";
            }
        });
        if (settings.stringify) {
            return JSON.stringify(obj);
        } else {
            return obj;
        }
    };

    //Chuyển đổi Form thành array (hỗ trợ hàm formToJson)
    $.fn.serializeArray = function (options) {
        var o = $.extend({
            checkboxesAsBools: false
        }, options || {});
        var rselectTextarea = /select|textarea/i;
        var rinput = /text|file|password|search/i;
        return this.map(function () {
            return this.elements ? $.makeArray(this.elements) : this;
        })
            .filter(function () {
                return this.name && !this.disabled &&
                    (this.checked
                        || (o.checkboxesAsBools && this.type === "checkbox")
                        || rselectTextarea.test(this.nodeName)
                        || rinput.test(this.type));
            })
            .map(function (i, elem) {
                var val = $(this).val();
                return val === null ?
                    null :
                    $.isArray(val) ?
                        $.map(val, function (val, i) {
                            return { name: elem.name, value: val };
                        }) :
                        {
                            name: elem.name,
                            value: (o.checkboxesAsBools && this.type === "checkbox") ?
                                (this.checked ? "true" : "false") :
                                val
                        };
            }).get();
    };

    //Chuyển đổi Json gán lên Form
    $.fn.jsonToForm = function (data) {
        if (typeof data === "string") {
            data = JSON.parse(data);
        }
        $.each(this.find("*[name]"), function () {
            var inputType = $(this).attr("type"),
                dataValue = data[$(this).attr("name")];
            if (inputType === "radio" || inputType === "checkbox") {
                if ($.isArray(dataValue)) {
                    $(this).prop("checked", $.inArray($(this).val(), dataValue) > -1);
                }
                else {
                    $(this).prop("checked", dataValue === "true");
                }
            } else if (inputType === "file") {
                $(this).siblings(".fileinput-filename").text(dataValue);
                $(this).siblings(".fileinput-filename").css({ "display": "block" });
            } else {
                $(this).val(dataValue);
            }
        });
    };

    //option: {{title, text, confirmButton, cancelButton, post, submitForm, confirmButtonClass, cancelButtonClass, dialogClass, modalOptionsBackdrop, modalOptionsKeyboard}}
    $.fn.confirm = function (options) {
        if (typeof options === "undefined") {
            options = {};
        }
        this.click(function (e) {
            e.preventDefault();
            var newOptions = $.extend({
                button: $(this)
            }, options);
            $.confirm(newOptions, e);
        });
        return this;
    };

    $.confirm = function (options, e) {
        //nếu không có option thì log error rồi exit
        if (typeof options === "undefined") {
            console.error("No options given.");
            return;
        }

        if ($(".confirmation-modal").length > 0)
            return;

        var dataOptions = {};
        if (options.button) {
            var dataOptionsMapping = {
                "title": "title",
                "text": "text",
                "confirm-button": "confirmButton",
                "submit-form": "submitForm",
                "cancel-button": "cancelButton",
                "confirm-button-class": "confirmButtonClass",
                "cancel-button-class": "cancelButtonClass",
                "dialog-class": "dialogClass",
                "modal-options-backdrop": "modalOptionsBackdrop",
                "modal-options-keyboard": "modalOptionsKeyboard"
            };
            $.each(dataOptionsMapping, function (attributeName, optionName) {
                var value = options.button.data(attributeName);
                if (typeof value !== "undefined") {
                    dataOptions[optionName] = value;
                }
            });
        }

        // Default options
        var settings = $.extend({}, $.confirm.options, {
            confirm: function () {
                if (dataOptions.submitForm
                    || (typeof dataOptions.submitForm === "undefined" && options.submitForm)
                    || (typeof dataOptions.submitForm === "undefined" && typeof options.submitForm === "undefined" && $.confirm.options.submitForm)
                ) {
                    e.target.closest("form").submit();
                } else {
                    var url = e && (("string" === typeof e && e) || (e.currentTarget && e.currentTarget.attributes["href"].value));
                    if (url) {
                        if (options.post) {
                            var form = $("<form method='post' class='hide' action='" + url + "'></form>");
                            $("body").append(form);
                            form.submit();
                        } else {
                            window.location = url;
                        }
                    }
                }
            },
            cancel: function (o) {
            },
            button: null
        }, options, dataOptions);

        // Modal
        var modalHeader = "";
        if (settings.title !== "") {
            modalHeader =
                "<div class='modal-header'>" +
                "<button type='button' class='close' data-dismiss='modal' aria-hidden='true'>&times;</button>" +
                "<h4 class='modal-title'>" + settings.title + "</h4>" +
                "</div>";
        }
        var cancelButtonHtml = "";
        if (settings.cancelButton) {
            cancelButtonHtml =
                "<button class='cancel btn " + settings.cancelButtonClass + "' type='button' data-dismiss='modal'>" +
                settings.cancelButton +
                "</button>";
        }
        var modalHTML =
            "<div class='confirmation-modal modal' tabindex='-1' role='dialog'>" +
            "<div class='" + settings.dialogClass + "'>" +
            "<div class='modal-content'>" +
            modalHeader +
            "<div class='modal-body'>" + settings.text + "</div>" +
            "<div class='modal-footer'>" +
            "<button class='confirm btn " + settings.confirmButtonClass + "' type='button' data-dismiss='modal'>" +
            settings.confirmButton +
            "</button>" +
            cancelButtonHtml +
            "</div>" +
            "</div>" +
            "</div>" +
            "</div>";

        var modal = $(modalHTML);

        // Apply modal options
        if (typeof settings.modalOptionsBackdrop !== "undefined" || typeof settings.modalOptionsKeyboard !== "undefined") {
            modal.modal({
                backdrop: settings.modalOptionsBackdrop,
                keyboard: settings.modalOptionsKeyboard
            });
        }

        modal.on("show.bs.modal", function () {
            modal.find(".btn-primary:first").focus();
            centerModal();
        });
        modal.on("hidden.bs.modal", function () {
            modal.remove();
        });
        modal.find(".confirm").click(function () {
            settings.confirm(settings.button);
        });
        modal.find(".cancel").click(function () {
            settings.cancel(settings.button);
        });

        // Show the modal
        $("body").append(modal);
        modal.modal("show");
    };
    //cấu hình options
    $.confirm.options = {
        text: "Are you sure?",
        title: "",
        confirmButton: "Yes",
        cancelButton: "Cancel",
        post: false,
        submitForm: false,
        confirmButtonClass: "btn-primary",
        cancelButtonClass: "btn-default",
        dialogClass: "modal-dialog modal-center",
        modalOptionsBackdrop: true,
        modalOptionsKeyboard: true
    };
})(jQuery);
// #endregion

// #region events listener

//bind nút enter
$(document).on("keypress", function (event) {
    if (event.keyCode === 13) {
        if ($(".modal.in").length === 0) {
            if ($("#dvMain").find("ul.nav-tabs").length === 0) {
                $("#dvMain").find(".BindButton").click();
            }
            else {
                $("#dvMain").find(".tab-pane.active").find(".BindButton").click();
            }
        }
        else {
            //nothing
        }
    }
});

//bind modals events
$(document).on("show.bs.modal", ".modal", function (e) {
    var zIndex = 1050 + (10 * $(".modal.in").length);
    $(this).css("z-index", zIndex);
    DynamicSelect2 = zIndex + 10;
    $(".modal.in").each(function () {
        if ($(this).css("z-index") < zIndex) {
            $(this).hide();
        }
    });

    //$(this).draggable();

});
$(document).on("shown.bs.modal", ".modal", function (e) {
    isAlreadyPressed = true;
    centerModal();
    $(this).append("<input type='text' id='btnAutoFocus' style='opacity:0' />");
    $(this).find("#btnAutoFocus").focus();
    $(this).off("keypress").on("keypress", function (event) {
        if (event.keyCode === 13) {
            if ($(this).find("ul.nav-tabs").length === 0) {
                $(this).find(".BindButton").click();
            }
            else {
                $(this).find(".tab-pane.active").find(".BindButton").click();
            }
        }
    });
});
$(document).on("hide.bs.modal", ".modal", function () {
    $(this).find("#btnAutoFocus").remove();
    var index_highest = 0;
    var index_current = parseInt($(this).css("z-index"), 10);
    if (index_current > index_highest) {
        index_highest = index_current;
    }
    $(".modal.in").each(function () {
        if (parseInt($(this).css("z-index")) === index_highest - 10) {
            $(this).show();
        } else {
            $(this).hide();
        }
    });
});
$(document).on("hidden.bs.modal", ".modal", function () {
    if ($(".modal.in").length === 0) {
        $(".modal").css("z-index", "");
    }
    centerModal();
    $(".modal.in").length && $(document.body).addClass("modal-open");
});

//bind tabs events
$("a[data-toggle='tab']").on("shown.bs.tab", function (e) {
    $(e.target).closest(".modal").find("#btnAutoFocus").focus();
});

//bind select2 events
$(document).on("select2:open", ".select2", function (evt) {
    $("body > span > span.dynamic-select2").css("z-index", DynamicSelect2);
});

//bind window events
window.onerror = function (msg, url, lineNo, columnNo, error) {
    var string = msg.toLowerCase();
    var substring = "script error";
    if (string.indexOf(substring) > -1) {
        alert('Lỗi chưa xác định: Mở cửa sổ console để xem chi tiết');
    } else {
        var message = [
            'Nội dung lỗi: ' + msg,
            'Tập tin lỗi: ' + url,
            'Dòng: ' + lineNo,
            'Cột: ' + columnNo
        ];
        JSON.stringify(error) !== "{}" && message.push({ 'Đối tượng lỗi': JSON.stringify(error) });
        alert(message.join(' \n ') + '\nVui lòng mở cửa sổ console để xem chi tiết.');
    }
    return false;
};

$(window).on("resize", function () {
    centerModal();
});
$(document).on('shown.bs.collapse', function () {
    centerModal();
});
$(document).on('hidden.bs.collapse', function () {
    centerModal();
});

//$(window).on('beforeunload', function () {
//    db.close();
//    return "";
//});
// #endregion