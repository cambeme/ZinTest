/** This file is called from within the constructor to
     * initialize the library.
     * WARNING: Do NOT remove this code. The content of this method is
     * always regenerated by system. If this comment is removed the program will blow up
     */

// When I wrote this, only God and I understood what I was doing
// Now, God only knows

// I dedicate all this code, all my work, to my wife, Kristen Li, who will
// have to support me and our two children and the dog once it gets
// released into the public.

// #region global vars
var GLOBAL = {
    linkRoot: _WEB_URL,
    CurrentUser: null,
    LoadHuyen: function (tinhId, control, valueSelected) {
        DanhMucAjax.GetDistrictByProvinceId(tinhId, function (data) {
            if (control[0].getAttribute("data-dontshow-caption") !== "1") {
                data.value.unshift({
                    huyenId: 0,
                    ten: '--- Chọn Quận/Huyện ---'
                });
            }

            var options = data.value.map(item => '<option value="' + item.huyenId + '" ' + ((item.huyenId == 0) ? "selected" : "") + '>' + item.ten + '</option>');
            if (valueSelected || GLOBAL.CurrentUser) {
                options = data.value.map(function (item) {
                    var selected = false;
                    if (valueSelected && item.huyenId == parseInt(valueSelected)) {
                        selected = true;
                    }
                    //else if (GLOBAL.CurrentUser.Xa && GLOBAL.CurrentUser.Huyen.huyenId == item.huyenId) {
                    //    selected = true;
                    //}
                    return '<option value="' + item.huyenId + '" ' + ((selected) ? "selected" : "") + '>' + item.ten + '</option>'
                });
            }
            control.empty().append(options);
            control.trigger('change');
        });
    },
    LoadXa: function (huyenId, control, valueSelected) {
        DanhMucAjax.GetWardByDistrictId(huyenId, function (data) {
            if (control[0].getAttribute("data-dontshow-caption") !== "1") {
                data.value.unshift({
                    xaId: 0,
                    ten: '--- Chọn Phường/Xã ---'
                });
            }

            var options = data.value.map(item => '<option value="' + item.xaId + '" ' + ((item.xaId == 0) ? "selected" : "") + '>' + item.ten + '</option>');
            if (valueSelected || GLOBAL.CurrentUser) {
                options = data.value.map(function (item) {
                    var selected = false;
                    if (valueSelected && item.xaId == parseInt(valueSelected)) {
                        selected = true;
                    }
                    //else if (GLOBAL.CurrentUser.Xa && GLOBAL.CurrentUser.Xa.xaId == item.xaId) {
                    //    selected = true;
                    //}
                    return '<option value="' + item.xaId + '" ' + ((selected) ? "selected" : "") + '>' + item.ten + '</option>'
                });
            }
            control.empty().append(options);
            control.trigger('change');
        });
    },
    waitAll: 0,
    isAjaxFailed: false,
    ajaxInvoke: false,
    dynamicSelect2zIndex: 4,
    callAjax: function (url, data, callback, options) {
        var contentType = null;
        var dataType = null;
        if (!options || (options && options.requestType !== 'form')) {
            contentType = 'application/json; charset=utf-8';
            dataType = 'json';
        }
        var jqxhr = $.ajax({
            url: GLOBAL.linkRoot + url,
            type: 'POST',
            contentType: contentType,
            dataType: dataType,
            data: data ? JSON.stringify(data) : null
        }).always((dataORjqXHR, textStatus, jqXHRORerrorThrown) => {
            processAjaxResult(dataORjqXHR, textStatus, jqXHRORerrorThrown, callback, options);
        });
    },
    validateOptions: {
        errorPlacement: function (error, element) {
            formValidationErrorPlacement(error, element);
        },
        success: function (label, element) {
            $(element).popover("hide");
        }
    },
    wizardOptions: {
        theme: "arrows",
        keyNavigation: false,
        useURLhash: false,
        showStepURLhash: false,
        autoAdjustHeight: false,
        transitionEffect: 'fade',
        lang: {
            next: 'Bước sau',
            previous: 'Bước trước'
        },
        toolbarSettings: {
            toolbarPosition: "bottom",
            toolbarExtraButtons: [
                $('<a class="btn btn-primary hover-effect" id="btnHoanTatBienDong" style="display:none"><i class="fa fa-save"></i> Hoàn tất</a>'),
                $('<a class="btn btn-default hover-effect" data-dismiss="modal" id="btnDongBienDong"><i class="fa fa-remove"></i> Đóng</a>')
            ]
        },
    },
    showMessage: {
        OK: "OK",
        YESNO: "YESNO",
        WARNING: "exclamation-circle",
        INFO: "info-circle",
        QUESTION: "question-circle",
        ERROR: "times-circle",
        SUCCESS: "check-circle",
        UNSUCCESS: "meh-o",
        show: function (opts) {
            var defaultOpts = {
                title: "Thông báo",
                msg: "",
                errorMsg: "",
                icon: "info-circle",
                buttons: "OK",
                fn: null,
                ajaxErr: false,
            };
            opts = $.extend({}, defaultOpts, opts);
            var modal = [];
            var iconColor = "#dddddd"; //default
            if (opts.icon == GLOBAL.showMessage.WARNING) {
                iconColor = "orange";
            }
            else if (opts.icon == GLOBAL.showMessage.ERROR || opts.icon == GLOBAL.showMessage.UNSUCCESS) {
                iconColor = "#e26565";
            }
            modal.push("<div class='modal message'>");
            if (opts.ajaxErr) {
                modal.push("<div class='modal-dialog modal-dialog modal-center modal-95' role='document'>");
            } else {
                modal.push("<div class='modal-dialog modal-dialog modal-center modal-30' role='document'>");
            }
            modal.push("<div class='modal-content'>");
            modal.push("<div class='modal-header'>");
            modal.push("<h4 class='modal-title'>" + opts.title + "</h4>");
            modal.push("</div>");
            modal.push("<div class='modal-body'>");
            if (opts.ajaxErr) {
                modal.push("<div style='overflow:auto;max-height:65vh'>");
            } else {
                modal.push("<div style='width:50px; height:50px; display: table-cell; font-size:50px; color: " + iconColor + "'><i class='fa fa-" + opts.icon + "' style='position: absolute; top:10px; opacity: 0.4'></i></div>");
                modal.push("<div style='display: table-cell; text-align: center; vertical-align:middle; padding-left:15px'>");
            }
            modal.push("<p style='font-size:15px'>" + opts.msg + "</p>");
            modal.push("<p style='font-size:15px'>" + opts.errorMsg + "</p>");
            modal.push("</div>");
            modal.push("<div></div>");
            modal.push("</div>");
            modal.push("<div class='modal-footer' style='text-align: center'>");
            modal.push("</div>");
            modal.push("</div>");
            modal.push("</div>");
            modal.push("</div>");
            modal = $(modal.join("")).appendTo($("#dvModalContainer"));
            if (opts.buttons == "OK") {
                modal.find(".modal-footer").append($("<button type='button' class='btn btn-success' value='OK'><i class='fa fa-check-circle'></i> Đồng ý</button>"));
            }
            else if (opts.buttons == "YESNO") {
                modal.find(".modal-footer").append($("<button type='button' class='btn btn-success' value='YES'><i class='fa fa-check-circle'></i> Đồng ý</button>"));
                modal.find(".modal-footer").append($("<button type='button' class='btn' value='NO'><i class='fa fa-times-circle'></i> Không</button>"));
            }
            modal.find(".modal-footer button").click(function () {
                modal.modal("hide");
                modal.remove();

                if (typeof (opts.fn) == "function") {
                    opts.fn(this.value);
                }
            });
        }
    }
};
// #endregion

// #region document ready

$(function () {
    //cấu hình legend
    $.initialize("legend", function () {
        $(this).on('click', function () {
            if ($(this).hasClass('collapsed')) {
                $(this).removeClass('collapsed');
                $(this).siblings().show();
            } else {
                $(this).addClass('collapsed');
                $(this).siblings().hide();
            }
        });
    });

    //cấu hình .form-control
    $.initialize(".form-control", function () {
        $(this).on('focus blur change', function (event) {
            var parentFormGroup = $(this).closest('.form-group');
            if (parentFormGroup.length > 0) {
                var hasClassFocused = parentFormGroup.hasClass('focused');
                switch (event.type) {
                    case 'focus':
                        //nếu chưa có class focused thì thêm vào
                        if (!hasClassFocused) {
                            parentFormGroup.addClass('focused');
                        }
                        //nếu là datepicker hoặc datetimepicker thì show lên
                        if ($(this).hasClass('datepicker') || $(this).hasClass('datepicker-from') || $(this).hasClass('datepicker-to') || $(this).hasClass('datetimepicker') || $(this).hasClass('datetimepicker-from') || $(this).hasClass('datetimepicker-to')) {
                            $(this).datepicker('show');
                        }
                        break;
                    case 'blur':
                    case 'change':
                        //nếu trường đã có giá trị
                        if ($(this).val() && $(this).val().length > 0) {
                            //nếu chưa có class focused thì thêm vào
                            if (!hasClassFocused) {
                                parentFormGroup.addClass('focused');
                            }
                        } else {
                            //nếu đã có class focused thì bỏ đi
                            if (hasClassFocused) {
                                parentFormGroup.removeClass('focused');
                            }
                        }
                        break;
                }
            }
        }).trigger('blur');
    });

    //cấu hình validator
    if ($().validate) {
        $.validator.addMethod("date", function (value, element) {
            return this.optional(element) || moment(value, "DD/MM/YYYY", true).isValid();
        }, "Vui lòng nhập theo dạng dd/mm/yyyy");
        $.validator.addMethod("datetime", function (value, element) {
            return this.optional(element) || moment(value, "DD/MM/YYYY HH:mm", true).isValid();
        }, "Vui lòng nhập theo dạng dd/mm/yyyy hh:mm");
        $.extend($.validator.messages, {
            required: "Dữ liệu không được để trống.",
            email: "Vui lòng nhập email hợp lệ.",
            number: "Số không hợp lệ",
            digits: "Số không hợp lệ."
        });
    }

    //cấu hình modal
    $.initialize(".modal", function () {
        $(this).appendTo($("#dvModalContainer"));
        var resizeListener = new ResizeListener(this);
        resizeListener.on('resize', centerModal);
        //bind modals events
        $(this).on("keypress", function (event) {
            if (event.keyCode === 13) {
                if ($(this).find("ul.nav-tabs").length === 0) {
                    $(this).find(".BindButton").click();
                }
                else {
                    $(this).find(".tab-pane.active").find(".BindButton").click();
                }
            }
        });

        $(this).on("show.bs.modal", function (e) {
            var zIndex = 1050 + (10 * $(".modal.in").length);
            $(this).css("z-index", zIndex);
            GLOBAL.dynamicSelect2zIndex = zIndex + 10;
            $(".modal.in").each(function () {
                if ($(this).css("z-index") < zIndex) {
                    $(this).hide();
                }
            });
            //$(this).draggable();
        });

        $(this).on("shown.bs.modal", function (e) {
            centerModal();
        });

        $(this).on("hide.bs.modal", function () {
            var index_highest = 0;
            var index_current = parseFloat($(this).css("z-index"), 10);
            if (index_current > index_highest) {
                index_highest = index_current;
            }
            $(".modal.in").each(function () {
                if (parseFloat($(this).css("z-index")) === index_highest - 10) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });
        });

        $(this).on("hidden.bs.modal", function () {
            if ($(".modal.in").length === 0) {
                $(".modal").css("z-index", "");
            }
            centerModal();
            $(".modal.in").length && $(document.body).addClass("modal-open");
        });

        if ($(this).hasClass('message')) {
            $(this).modal('show');
        }
    });

    //cấu hình collapse
    $.initialize(".collapse", function () {
        $(this).on('shown.bs.collapse', function () {
            switchBindButton($(this), 'show');
        });

        $(this).on('hidden.bs.collapse', function () {
            switchBindButton($(this), 'hide');
        });
    });

    //cấu hình mặc định cho datepicker
    if ($.datepicker) {
        $.datepicker.setDefaults({
            currentText: "Hiện tại (enter)",
            closeText: "Đóng",
            autoSize: false,
            showButtonPanel: true,
            buttonText: "Chọn ngày",
            changeMonth: true,
            changeYear: true,
            prevText: "&#x3C;Trước",
            nextText: "Tiếp&#x3E;",
            monthNames: ["Tháng Một", "Tháng Hai", "Tháng Ba", "Tháng Tư", "Tháng Năm", "Tháng Sáu",
                "Tháng Bảy", "Tháng Tám", "Tháng Chín", "Tháng Mười", "Tháng Mười Một", "Tháng Mười Hai"],
            monthNamesShort: ["Tháng 1", "Tháng 2", "Tháng 3", "Tháng 4", "Tháng 5", "Tháng 6",
                "Tháng 7", "Tháng 8", "Tháng 9", "Tháng 10", "Tháng 11", "Tháng 12"],
            dayNames: ["Chủ Nhật", "Thứ Hai", "Thứ Ba", "Thứ Tư", "Thứ Năm", "Thứ Sáu", "Thứ Bảy"],
            dayNamesShort: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
            dayNamesMin: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
            weekHeader: "Tu",
            dateFormat: "dd/mm/yy",
            firstDay: 0,
            isRTL: false,
            showMonthAfterYear: false,
            yearSuffix: "",
            duration: "fast",
            hideIfNoPrevNext: true,
            numberOfMonths: 1,
            showWeek: true,
            yearRange: "1900:2099"
        });
        //ấn nút Hôm nay tự động chọn ngày hôm nay
        $.datepicker._gotoToday = function (id) {
            $(id).datepicker("setDate", new Date()).datepicker("hide").blur();
        };
        //cấu hình datepicker
        $.initialize(".datepicker", function () {
            $(this).datepicker({
                beforeShow: function () {
                    setTimeout(function () {
                        $('.ui-datepicker').css('z-index', 999999);
                    }, 0);
                }
            }).inputmask("date", {
                placeholder: "__/__/____",
                showMaskOnHover: false,
                clearIncomplete: true
            });
        });

        $.initialize(".datepicker-from", function () {
            $(this).datepicker({
                onSelect: function (selectedDateTime) {
                    $(".datepicker-to").datepicker("option", "minDate", $(".datepicker-from").datepicker("getDate"));
                },
                beforeShow: function () {
                    setTimeout(function () {
                        $('.ui-datepicker').css('z-index', 999999);
                    }, 0);
                }
            }).inputmask("date", {
                placeholder: "__/__/____",
                showMaskOnHover: false,
                clearIncomplete: true
            });
        });

        $.initialize(".datepicker-to", function () {
            $(this).datepicker({
                onSelect: function (selectedDateTime) {
                    $(".datepicker-from").datepicker("option", "maxDate", $(".datepicker-to").datepicker("getDate"));
                },
                beforeShow: function () {
                    setTimeout(function () {
                        $('.ui-datepicker').css('z-index', 999999);
                    }, 0);
                }
            }).inputmask("date", {
                placeholder: "__/__/____",
                showMaskOnHover: false,
                clearIncomplete: true
            });
        });
    }

    //cấu hình mặc định cho datetimepicker
    if ($.timepicker) {
        $.timepicker.setDefaults({
            currentText: "Hiện tại (enter)",
            closeText: "Đóng",
            timeOnlyTitle: "Chọn giờ",
            timeText: "Thời gian",
            hourText: "Giờ",
            minuteText: "Phút",
            secondText: "Giây",
            millisecText: "Mili giây",
            microsecText: "Micrô giây",
            timezoneText: "Múi giờ",
            controlType: "select",
            oneLine: true,
            timeInput: true,
            //timeFormat: "hh:mm tt",
            timeSuffix: "",
            amNames: ["sáng", "S"],
            pmNames: ["chiều", "C"],
            isRTL: false
        });
        //cấu hình datetimepicker
        $.initialize(".datetimepicker", function () {
            $(this).datetimepicker().inputmask("datetime", {
                placeholder: "__/__/____ __:__",
                showMaskOnHover: false,
                clearIncomplete: true
            });
        });

        $.initialize(".datetimepicker-from", function () {
            $(this).datetimepicker({
                onSelect: function (selectedDateTime) {
                    $(".datetimepicker-to").datetimepicker("option", "minDate", $(".datetimepicker-from").datetimepicker("getDate"));
                }
            }).inputmask("datetime", {
                placeholder: "__/__/____ __:__",
                showMaskOnHover: false,
                clearIncomplete: true
            });
        });

        $.initialize(".datetimepicker-to", function () {
            $(this).datetimepicker({
                onSelect: function (selectedDateTime) {
                    $(".datetimepicker-from").datetimepicker("option", "maxDate", $(".datetimepicker-to").datetimepicker("getDate"));
                }
            }).inputmask("datetime", {
                placeholder: "__/__/____ __:__",
                showMaskOnHover: false,
                clearIncomplete: true
            });
        });
    }

    //cấu hình mask
    if ($().inputmask) {
        $.initialize(".percent", function () {
            $(this).inputmask('integer', { min: 0, max: 100, suffix: " %", removeMaskOnSubmit: true, autoUnmask: true, showMaskOnHover: false, rightAlign: false });
        });
        $.initialize(".money", function () {
            $(this).inputmask("integer", { groupSeparator: ",", autoGroup: true, rightAlign: false, suffix: " đ", removeMaskOnSubmit: true, autoUnmask: true, showMaskOnHover: false });
        });
        $.initialize(".number", function () {
            $(this).inputmask("decimal", { rightAlign: false });
        });
        $.initialize(".phone", function () {
            $(this).inputmask({ regex: '[0-9]*', rightAlign: false });
        });
        $.initialize(".area", function () {
            $(this).inputmask("decimal", { groupSeparator: ",", autoGroup: true, rightAlign: false, digits: 1, suffix: " m\u00B2", removeMaskOnSubmit: true, autoUnmask: true, showMaskOnHover: false });
        });
        //$.initialize(".year", function () {
        //    $(this).inputmask("decimal", { groupSeparator: ",", autoGroup: true, rightAlign: false, digits: 1, suffix: " năm", removeMaskOnSubmit: true, autoUnmask: true, showMaskOnHover: false });
        //});
        $.initialize(".email", function () {
            $(this).inputmask("email", { rightAlign: false, removeMaskOnSubmit: true, showMaskOnHover: false, clearIncomplete: true });
        });
    }

    ////cấu hình select2
    //if ($().select2) {
    //    $.initialize("select.select2.select2-autobind:not(.select2-hidden-accessible)", function () {
    //        InitDataSelect2(this);
    //        var parentFormGroup = $(this).closest('.form-group');
    //        var hasClassFocused = parentFormGroup.hasClass('focused');
    //        //nếu chưa có class focused thì thêm vào
    //        if (!hasClassFocused) {
    //            parentFormGroup.addClass('focused');
    //        }
    //        $(this).on("select2:open", function (evt) {
    //            if ($(this).closest('.modal').length > 0) {
    //                $("body > span > span.dynamic-select2").css("z-index", GLOBAL.dynamicSelect2zIndex);
    //            }
    //        });
    //    });
    //    $.initialize("select.select2:not(.select2-autobind,.select2-hidden-accessible,.select2-ajax)", function () {
    //        $(this).select2({
    //            dropdownCssClass: "dynamic-select2", allowClear: false, width: "100%"
    //        });
    //        var parentFormGroup = $(this).closest('.form-group');
    //        var hasClassFocused = parentFormGroup.hasClass('focused');
    //        //nếu chưa có class focused thì thêm vào
    //        if (!hasClassFocused) {
    //            parentFormGroup.addClass('focused');
    //        }
    //        $(this).on("select2:open", function (evt) {
    //            if ($(this).closest('.modal').length > 0) {
    //                $("body > span > span.dynamic-select2").css("z-index", GLOBAL.dynamicSelect2zIndex);
    //            }
    //        });
    //    });
    //}

    //cấu hình tooltipster
    if ($().tooltipster) {
        $.initialize(".tooltip", function () {
            $(this).tooltipster({
                delay: 0
            });
        });
        $.initialize(".tooltip-btn", function () {
            $(this).tooltipster({
                delay: 0,
                animation: "grow"
            });
        });
    }

    //cấu hình tinymce
    if (window.tinyMCE) {
        tinymce.init({
            selector: ".editable",
            //language: "en_US",
            language: "vi_VN",
            height: 200,
            theme: "modern",
            plugins: [
                "advlist autolink lists link charmap print preview hr anchor pagebreak",
                "searchreplace wordcount visualblocks visualchars code fullscreen",
                "insertdatetime nonbreaking save table contextmenu directionality",
                "emoticons template paste textcolor colorpicker textpattern"
            ],
            toolbar1: "insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image",
            toolbar2: "print preview media | forecolor backcolor emoticons",
            image_advtab: true,
            templates: [
                { title: "Test template 1", content: "Test 1" },
                { title: "Test template 2", content: "Test 2" }
            ],
            content_css: [
                "../../Assets/plugins/tinymce/codepen.min.css"
            ],
            force_br_newlines: true,
            force_p_newlines: false,
            forced_root_block: false
        });
        $.initialize(".editable", function () {
            tinyMCE.execCommand('mceAddControl', false, this.id);
        });
    }

    //cấu hình datatable
    if ($.fn.dataTable) {
        $.fn.dataTable.ext.errMode = 'none';
        $.initialize("table:not(.not-full-width)", function () {
            $(this).css({ "width": "100%" });
        });
        if ($(".dataTables_filter").length) {
            $(".CreateButton").insertBefore(".dataTables_filter");
        }
        else if ($(".btn-top-table").length) {
            $(".dataTables_length").css({ "text-align": "left" });
            $(".btn-top-table").appendTo($(".dataTables_length").parent().siblings(".col-md-6"));
        }
    }

    //Lobibox
    if (Lobibox) {
        Lobibox.base.OPTIONS = $.extend({}, Lobibox.base.OPTIONS, {
            buttons: {
                ok: {
                    "class": "lobibox-btn lobibox-btn-default",
                    text: "OK",
                    closeOnClick: true
                },
                cancel: {
                    "class": "lobibox-btn lobibox-btn-cancel",
                    text: "Đóng",
                    closeOnClick: true
                },
                yes: {
                    "class": "btn btn-primary",
                    text: "Đồng ý",
                    closeOnClick: true
                },
                no: {
                    "class": "btn btn-danger",
                    text: "Hủy",
                    closeOnClick: true
                }
            }
        });
    }

    //cấu hình modal
    if ($.fn.modal) {
        $.fn.modal.Constructor.DEFAULTS.keyboard = false;
        $.fn.modal.Constructor.DEFAULTS.backdrop = "static";
    }

    $('#btnLoginAgain').on('click', function () {
        GLOBAL.callAjax('Account/AjaxLogin', {
            username: $('#loginAgainModal input[name="username"]').val(),
            password: $('#loginAgainModal input[name="password"]').val(),
        }, function (result) {
            $('#loginAgainModal').modal('hide');
            $('.modal-backdrop.in').css({ 'background-image': 'none', 'opacity': '.5' });
            GLOBAL.CurrentUser = result.CurrentUser;
            alertify.success('tl', 'Đăng nhập thành công');
        });
    });

    $.ajaxSetup({
        crossDomain: true,
        xhrFields: {
            withCredentials: true
        },
        statusCode: {
            401: function (err) {
                $('#loginAgainModal .login-form .erormess').html("");
                $('#loginAgainModal input').val("");
                $('#loginAgainModal').modal('show');
                $('.modal-backdrop.in').css({ 'background-image': 'url("' + GLOBAL.linkRoot + "/Assets/css/images/bg-login.png" + '")', 'opacity': 'inherit' });
            }
        }
    });
});

// #endregion

// #region anonymous functions
// lấy data của form
function getFormValue(form) {
    if (typeof (form) != 'object') {
        if (form[0] != "#") {
            form = "#" + form;
        }
        form = $(form);
    }
    else if (typeof (form) == 'object' && !(form instanceof jQuery)) {
        form = $(form);
    }
    if (!form) return null;
    var frm = {};
    var listModuleNames = [];

    form.find('[name]').each(function (index, item) {
        var closestVModule = $(item).closest('.VModule');

        if (closestVModule.length == 0 || listModuleNames.indexOf(closestVModule.attr('vmodule-id')) == -1) {
            var name = item.getAttribute('name');

            if (name != "") {
                if (item.type === 'checkbox' && (item.value == "on" || item.value == "off")) {
                    frm[name] = item.checked
                }
                else if (item.type === 'checkbox') {
                    frm[name] = item.checked
                }
                else if (item.type == 'radio' && item.checked == true) {
                    frm[name] = item.value;
                }
                else if (item.type != 'radio' || (item.type != 'radio' && !item.checked)) {
                    if (item.value != null) {
                        frm[name] = item.value

                        if ($(item).hasClass('VModule')) {
                            listModuleNames.push(item.getAttribute('vmodule-id'));
                        }
                    }
                }

            }
        }

    });
    return frm;
}

//clear form
function clearFormData(form) {

    if (typeof (form) != 'object') {
        if (form[0] != "#") {
            form = "#" + form;
        }

        form = $(form);
    }
    else if (typeof (form) == 'object' && !(form instanceof jQuery)) {
        form = $(form);
    }

    if (!form) return null;

    var frm = {};

    form.find('[name]').each(function (index, item) {

        var type = item.getAttribute("type");
        if (type == "text" || type == "email" || type == "password" || type == "hidden") {
            item.value = '';
        }
        else if (type == "checkbox") {
            item.checked = false;
        }
        else if (type == "file") {
            $(item).wrap('<form>').closest('form').get(0).reset();
            $(item).unwrap();
        }
        else if (item.className.indexOf('VModule') != -1) {
            item.value = null;
            $(item).trigger('initview');
        }
        else if (item.tagName == "SELECT") {
            //$(item).val($(item).find('option:first').val()).change();
            //if (item.selectedIndex == -1)
            {
                var selectItem = $(item).find('option:first').val();
                $(item).val(selectItem).trigger('change');
            }
        }
        else if (item.tagName == "TEXTAREA") {
            item.value = '';
        }
    });
}

//gán data lên form
function bindFormData(form, data) {
    if (typeof (form) != 'object') {
        if (form[0] != "#") {
            form = "#" + form;
        }

        form = $(form);
    }
    else if (typeof (form) == 'object' && !(form instanceof jQuery)) {
        form = $(form);
    }

    if (form) {
        clearFormData(form);

        if (data != null && data != '') {
            for (var prop in data) {
                var input = form.find('[name="' + prop + '"]');
                var type = input.attr('type');

                if (input && input[0]) {
                    if (input.hasClass('datepicker') || input.hasClass('datepicker-from') || input.hasClass('datepicker-to') || input.hasClass('datetimepicker') || input.hasClass('datetimepicker-from') || input.hasClass('datetimepicker-from')) {
                        if (data[prop] != null && data[prop] != "") {
                            var date = dateTimeReviver(null, data[prop]);
                            input.val(date).trigger('change');
                        }
                    }
                    else if (type == 'radio') {
                        if (input.length > 1) {
                            for (var i = 0; i < input.length; i++) {
                                input[i].checked = input[i].value == data[prop] + "";
                            }
                        }

                    }
                    else if (type == 'checkbox') {
                        if (data[prop] == 1 || input.val() == true) {
                            input.attr('checked', 'checked');
                            input[0].checked = true;
                        }
                        else {
                            input.attr('checked', null);
                            input[0].checked = false;
                        }
                    }
                    else if (type == "text" || type == "email" || type == "pasword" || type == "hidden" || input[0].tagName == "TEXTAREA") {
                        input.val(data[prop]).trigger('change');
                    }
                    else if (input[0].tagName == "SELECT") {
                        input.val(data[prop]).trigger('change');
                        input.attr('data-default-select', data[prop]);
                    }
                    else if (type === 'file') {
                        //do nothing
                    }
                    else { //VModule
                        input[0].value = data[prop];
                        input.trigger('initview');
                    }
                }
                else {
                    var exceptProps = ["InId", "OutId"];
                    if (typeof (data[prop]) != 'object' && data[prop] != null && data[prop] != "" && exceptProps.indexOf(prop) == -1) {
                        form.append('<input type="hidden" name=' + prop + ' value=' + data[prop] + '></input>');
                    }
                    var input = form.find('[value="' + prop + '"]');
                    var type = input.attr('type');
                    if (type === 'radio') {
                        if (input.length > 0) {
                            input[0].checked = data[prop];
                        }
                    }
                }
            }
        }

    }
}

//load script động
function bindScriptsDynamic(dom, callback) {
    var scripts = dom.find('script');
    GLOBAL.waitAll = 0;
    if (scripts && scripts.length > 0) {
        scripts.each(function (index, script) {
            var urlScr = script.getAttribute('src');
            if (urlScr != null) {
                var fnLoad = urlScr.split('/');
                fnLoad = fnLoad[fnLoad.length - 1].replace('.js', '');
                $.getScript(urlScr).always(function (dataORjqXHR, textStatus, jqXHRORerrorThrown) {
                    processAjaxResult(dataORjqXHR, textStatus, jqXHRORerrorThrown, callback, { scripts: scripts, script: script, fnLoad: fnLoad, requestType: 'script' });
                });
            }
        });
    }
}

function dateTimeReviver(key, value) {
    var date;
    if (typeof value === 'string') {
        var jsonDate = /\/Date\((-*\d*)\)\//.exec(value);
        var isoDate = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
        if (jsonDate) {
            date = new Date(+jsonDate[1]);
            return `${(date.getDate() < 10 ? '0' : '') + (date.getDate() === 0 ? '1' : date.getDate())
                }/${(date.getMonth() < 10 ? '0' : '') + (date.getMonth() === 0 ? '1' : date.getMonth() + 1)}/${(date.getFullYear() === 0 ? '0001' : date.getFullYear())}`;
        } else if (isoDate) {
            date = new Date(value);
            return `${(date.getDate() < 10 ? '0' : '') + (date.getDate() === 0 ? '1' : date.getDate())}/${(date.getMonth() < 10 ? '0' : '') + (date.getMonth() === 0 ? '1' : date.getMonth() + 1)}/${(date.getFullYear() === 0 ? '0001' : date.getFullYear())}`;
        }
    }
    return value;
}

function tryParseDateInObject(obj) {
    if (typeof obj === "object") {
        for (var prop in obj) {
            obj[prop] = tryParseDateInObject(obj[prop]);
        }
        return obj;
    } else {
        var pattern = /Date\(([^)]+)\)/;
        var results = pattern.exec(obj);
        if (results && results.length === 2) {
            var date;
            if (isJson(obj)) {
                date = JSON.stringify(JSON.parse(obj, dateTimeReviver));
            } else {
                date = dateTimeReviver(null, obj);
            }
            if (date) {
                return date;
            }
        }
        return obj;
    }
}

//khởi tạo data select2
function InitDataSelect2(dom) {
    //select2 select2-autobind Config:
    //data-auto-bind: Name of property in collection DanhMuc
    //data-value-field: Value field
    //data-display-field: Display field
    //data-display-default: --Chọn abc---
    //data-default-select: default select
    //data-current-user: current user
    var me = this;
    var maxInterval = 200; //20s
    var countInterval = 0;
    if (dom && dom.getAttribute('data-auto-bind')) {
        var interval = setInterval(function () { //<= set tạm vì không biết khi nào load xong DanhMuc
            var danhMucs = localDB.getCollection("DanhMuc");
            var domAttribute = dom.getAttribute('data-auto-bind');
            var options;
            if (danhMucs != null) {
                if (danhMucs.data && danhMucs.data.length > 0 && danhMucs.data[0] && danhMucs.data[0].value) {
                    options = danhMucs.data[0].value[domAttribute];
                }
                else {
                    console.log(dom.getAttribute('data-auto-bind') + " not found in collection DanhMuc")
                }
                clearInterval(interval);
                if (options != null) {
                    if (GLOBAL.CurrentUser && domAttribute === 'huyens') {
                        options = options.filter(function (item) {
                            return item.tinhId == GLOBAL.CurrentUser.Huyen.tinhId;
                        }).map(function (item) {
                            return {
                                id: item[dom.getAttribute('data-value-field')],
                                text: item[dom.getAttribute('data-display-field')]
                            }
                        });
                    } else {
                        options = options.map(function (item) {
                            return {
                                id: item[dom.getAttribute('data-value-field')],
                                text: item[dom.getAttribute('data-display-field')]
                            }
                        });
                    }
                }
                else {
                    options = [];
                }

                var defaultDispay = dom.getAttribute('data-display-default');
                if (defaultDispay != null && defaultDispay != "") {
                    options.unshift({
                        id: 0,
                        text: defaultDispay
                    })
                }
                //$(dom).select2('destroy');
                $(dom).select2({
                    dropdownCssClass: "dynamic-select2", allowClear: false, width: "100%",
                    data: options
                });

                var defaultValue = dom.getAttribute("data-default-select");
                if (GLOBAL.CurrentUser && (domAttribute === 'tinhs' || domAttribute === 'huyens' || domAttribute === 'xas') && dom.getAttribute("data-allow-default-select") === "1") {
                    if (domAttribute === 'tinhs' && GLOBAL.CurrentUser.Tinh.tinhId > 0) {
                        defaultValue = GLOBAL.CurrentUser.Tinh.tinhId;
                    }
                    else if (domAttribute === 'huyens' && GLOBAL.CurrentUser.Huyen.huyenId > 0) {
                        defaultValue = GLOBAL.CurrentUser.Huyen.huyenId;
                    }
                }
                if (defaultValue) {
                    $(dom).val(defaultValue).trigger('change');
                }
                else {
                    $(dom).trigger('change');
                }
            }
            else {
                countInterval++;

                if (countInterval === maxInterval) {
                    clearInterval(interval);

                    console.log("DanhMuc colection could't load");
                }
            }
        }, 100);

    }
}

//chuyển mảng thành vòng lặp để lấy giá trị lần lượt hoặc ngẫu nhiên next, prev, cur và ran
function loopArr(arr, options) {
    var settings = $.extend({
        loop: false
    }, options);
    var cur = 0;
    arr.next = (function () { return (++cur >= this.length) ? (settings.loop ? this[0] : false) : this[cur]; });
    arr.prev = (function () { return (--cur < 0) ? false : this[cur]; });
    arr.cur = (function () { return this[cur]; });
    arr.ran = (function () { return this[Math.floor(Math.random() * this.length)]; });
    return arr;
}

//chuyển file upload sang chuỗi base64
function convertFileUploadToBase64String(file, callback) {
    var reader = new FileReader();
    reader.onload = function () {
        var strBase64 = this.result.split("base64,")[1];
        if (callback) {
            callback(strBase64);
        }
    }
    if (file) {
        reader.readAsDataURL(file);
    }
    else {
        callback();
    }
}

// #region Thư viện CRUD offline
function checkLocalExist(collectionName) {
    if (localDB.getCollection(collectionName) === null) {
        return false;
    } else {
        return true;
    }
}
function saveToLocal(collectionName, docData) {
    var collection = localDB.getCollection(collectionName);
    if (collection === null) {
        collection = localDB.addCollection(collectionName);
    }
    collection.clear({ removeIndices: true });
    var doc = collection.insert(docData);
    try {
        collection.update(doc);
    } catch (err) {
        alertify.warning("tl", err);
    }
}
function getFromLocal(collectionName) {
    return localDB.getCollection(collectionName).data[0];
}

// #endregion

//reset input trong form, ví dụ: clearChildrenByType(document.getElementById("processChuSuDung"));
function clearChildrenByType(element) {
    for (var i = 0; i < element.childNodes.length; i++) {
        var e = element.childNodes[i];
        if (e.tagName) switch (e.tagName.toLowerCase()) {
            case "input":
                switch (e.type) {
                    case "radio":
                    case "checkbox": e.checked = false; break;
                    case "button":
                    case "submit":
                    case "image": break;
                    default: e.value = ""; break;
                }
                break;
            case "select": e.selectedIndex = 0; break;
            case "textarea": e.value = ""; break;
            default: clearChildrenByType(e);
        }
    }
}

//reset select2 trong form, ví dụ clearChildrenSelect2ById("ddlQuanHuyen")
function clearChildrenSelect2ById(id) {
    $("#" + id).val("0").change();
}

//canh giữa modals
function centerModal() {
    $(".modal.in").each(function (index, value) {
        var $dialog = $(this).find(".modal-dialog.modal-center"),
            offset = ($(window).height() - $dialog.height()) / 2;
        if (offset >= 0 && offset <= 20) {
            $(this).css("top", "auto");
        } else {
            $(this).css("top", 0);
        }
        if (offset < 0) {
            offset = 0;
        }
        $dialog.css("margin-top", Math.floor(offset));
        $dialog.css("margin-bottom", 0);
    });
    $("table").css({ "width": "100%" });
}

//đóng tất cả modal đang mở
function closeAllModal() {
    $(".modal.in").each(function (index, value) {
        $(this).modal("hide");
    });
}

//pulsate
function pulsate(id) {
    $(id).pulsate({
        color: "#bf1c56", // set the color of the pulse
        reach: 20,                              // how far the pulse goes in px
        speed: 1000,                            // how long one pulse takes in ms
        pause: 0,                               // how long the pause between pulses is in ms
        glow: true,                             // if the glow should be shown too
        repeat: 3,                           // will repeat forever if true, if given a number will repeat for that many times
        onHover: false                          // if true only pulsate if user hovers over the element
    });
}

//Loading rotatingPlanem, wave, wanderingCubes, spinner, chasingDots, threeBounce, circle, cubeGrid, fadingCircle, foldingCube
function loading(show) {
    if (show) {
        $("body").loadingModal({
            position: "auto",
            text: "<b>Đang xử lý...</b>",
            color: "white",
            opacity: "0",
            backgroundColor: "transparent",
            animation: "fadingCircle"
        });
    }
    else {
        $("body").loadingModal("destroy");
    }
}

//Xử lý ajax error
function onError(xhr, errorType, exception) {
    loading(false);
    var responseText;
    var showText = "";
    try {
        responseText = JSON.parse(xhr.responseText);
        showText += "<div><div><b>" + errorType + " " + exception + "</b></div>";
        showText += "<div><u>Exception</u>:<br /><br />" + responseText.ExceptionType + "</div>";
        showText += "<div><u>StackTrace</u>:<br /><br />" + responseText.StackTrace + "</div>";
        showText += "<div><u>Message</u>:<br /><br />" + responseText.Message + "</div></div>";
    } catch (e) {
        responseText = xhr.responseText.replace(".7em", "13px").replace("<pre>", "").replace("</pre>", "");
        showText = responseText;
    }
    GLOBAL.showMessage.show({ msg: showText, icon: GLOBAL.showMessage.UNSUCCESS, title: xhr.statusText, ajaxErr: true });
}

//Chuyển đổi ngày tháng
function dateTimeConvert(string, options) {
    var settings = $.extend({
        time: false
    }, options);
    var date;
    var daysname = ["Chủ nhật", "Thứ hai", "Thứ ba", "Thứ tư", "Thứ năm", "Thứ sáu", "Thứ bảy"];
    var monthsname = ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];
    if (Object.prototype.toString.call(string) === "[object String]" && !/[a-z]/.test(string.toLowerCase())) {
        date = new Date(parseFloat(string));
    } else {
        date = new Date(string);
    }
    var month = date.getMonth();
    var hours = date.getHours();
    var minutes = date.getMinutes();
    var am = true;
    //if (hours > 12) {
    //    am = false;
    //    hours -= 12;
    //} else if (hours == 12) {
    //    am = false;
    //} else if (hours == 0) {
    //    hours = 0;
    //}
    var result = "";
    if (settings.time) {
        result += (date.getDate() < 10 ? "0" : "") + date.getDate() + "/" + monthsname[month] + "/" + date.getFullYear() + " " + (hours < 10 ? "0" : "") + hours + ":" + (minutes < 10 ? "0" : "") + minutes;
    } else {
        result += (date.getDate() < 10 ? "0" : "") + date.getDate() + "/" + monthsname[month] + "/" + date.getFullYear();
    }
    return result;
}

//Set content tinymce
function setContentTinymce(control, content) {
    tinymce.get(control).setContent(content);
}

//Get content tinymce
function getContentTinymce(control) {
    return tinymce.get(control).getContent({ format: "raw" });
}

//HTML string sang javascript var, ví dụ domToVar(document.getElementById("data_table").innerHTML); document.body.innerHTML += encoded; alert(unescape(encoded));
function domToVar(html) {
    encodedHtml = escape(html);
    encodedHtml = encodedHtml.replace(/\//g, "%2F");
    encodedHtml = encodedHtml.replace(/\?/g, "%3F");
    encodedHtml = encodedHtml.replace(/=/g, "%3D");
    encodedHtml = encodedHtml.replace(/&/g, "%26");
    encodedHtml = encodedHtml.replace(/@@/g, "%40");
    return encodedHtml;
}

//lọc mảng thành các phần tử độc nhất
function removeDupplicateObjectInArray(array, prop) {
    var n, y, x, i, result;
    result = [];
    o: for (i = 0, n = array.length; i < n; i++) {

        for (x = 0, y = result.length; x < y; x++) {

            if (isObjectEqual(result[x][prop], array[i][prop])) {
                continue o;
            }
        }
        result.push(array[i]);
    }
    return result;
}

//so sánh 2 object bằng nhau hay không
function isObjectEqual(a, b) {
    if (a === b) {
        return true;
    }
    if (a === null ||
        typeof a !== "object" ||
        b === null ||
        typeof b !== "object") {
        return false;
    }
    var propsInA = 0;
    var propsInB = 0;
    for (var prop in a) {
        propsInA += 1;
    }
    for (var prop in b) {
        propsInB += 1;
        if (!(prop in a) || !isObjectEqual(a[prop], b[prop]))
            return false;
    }
    return propsInA === propsInB;
}

// Convert array to object
function convertToObj(array) {
    var thisEleObj = new Object();
    if (typeof array === "object") {
        for (var i in array) {
            var thisEle;
            thisEle = convertToObj(array[i]);
            if (!IsEmpty(thisEle)) {
                thisEleObj[i] = thisEle;
            }
            else {
                thisEleObj[i] = null;
            }
        }
    } else {
        thisEleObj = array;
    }
    return thisEleObj;
}

//chuyển tiếng việt có dấu thành không dấu
function convertToEn(inputString, options) {
    var settings = $.extend({
        lower: false,
        removespaces: false
    }, options);
    var outputString = '';
    if (inputString) {
        outputString = inputString;
        if (settings.lower) {
            outputString = outputString.toLowerCase();
        }
        // In thường
        outputString = outputString.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, "a");
        outputString = outputString.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, "e");
        outputString = outputString.replace(/ì|í|ị|ỉ|ĩ/g, "i");
        outputString = outputString.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, "o");
        outputString = outputString.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, "u");
        outputString = outputString.replace(/ỳ|ý|ỵ|ỷ|ỹ/g, "y");
        outputString = outputString.replace(/đ/g, "d");
        // In hoa
        outputString = outputString.replace(/À|Á|Ạ|Ả|Ã|Â|Ầ|Á|Ậ|Ẩ|Ẫ|Ă|Ằ|Á|Ặ|Ẳ|Ẵ/g, "A");
        outputString = outputString.replace(/È|É|Ẹ|Ẻ|Ẽ|Ê|Ề|Ế|Ệ|Ể|Ễ/g, "E");
        outputString = outputString.replace(/Ì|Í|Ị|Ỉ|Ĩ/g, "I");
        outputString = outputString.replace(/Ò|Ó|Ọ|Ỏ|Õ|Ô|Ồ|Ố|Ộ|Ổ|Ỗ|Ơ|Ờ|Ớ|Ợ|Ở|Ỡ/g, "O");
        outputString = outputString.replace(/Ù|Ú|Ụ|Ủ|Ũ|Ư|Ừ|Ứ|Ự|Ử|Ữ/g, "U");
        outputString = outputString.replace(/Ỳ|Ý|Ỵ|Ỷ|Ỹ/g, "Y");
        outputString = outputString.replace(/Đ/g, "D");
        if (settings.removespaces) {
            outputString = outputString.replace(/\s/g, "");
        }
    }
    return outputString; // Trả về chuỗi đã chuyển
}

//Check string có phải GUID hay không
function isGuid(stringToTest) {
    if (stringToTest[0] === "{") {
        stringToTest = stringToTest.substring(1, stringToTest.length - 1);
    }
    var regexGuid = /^(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}$/gi;
    return regexGuid.test(stringToTest);
}

//toggle ẩn hiện onclick="toggle('.tach-tu-dong', this)"
function toggle(className, obj) {
    var $input = $(obj);
    if ($input.prop('checked')) $(className).show();
    else $(className).hide();
}

//làm tròn
function round(value, precision, isRound) {
    var multiplier = Math.pow(10, precision || 0)
    if (isRound)
        return Math.round(value * multiplier) / multiplier;
    return Math.floor(value * multiplier) / multiplier;
}

//kiểm tra mảng có chứa object không
function isArrayContainObject(array, object, options = { position: false }) {
    var isContain = false;
    var objPos;
    $.each(array, function (indexInArray, valueOfElement) {
        if (isObjectEqual(valueOfElement, object)) {
            isContain = true;
            objPos = indexInArray;
            return false;
        }
    });
    if (options.position === true) {
        if (isContain) {
            return objPos;
        } else {
            return isContain;
        }
    } else {
        return isContain;
    }
}

//kiểm tra object chứa array rỗng
function isObjectContainEmptyArray(obj) {
    var checkEmpty = true;
    for (key in obj) {
        if (obj[key].length > 0) {
            checkEmpty = false;
        }
    }
    return checkEmpty;
}

//cấu hình mặc định hiện popover cho form validation
function formValidationErrorPlacement(error, element) {
    var _popover;
    _popover = $(element).popover({
        trigger: "manual",
        placement: "auto",
        container: "body",
        animation: false,
        content: $(error).text(),
        template: "<div class='popover'><div class='arrow'></div><div class='popover-inner'><div class='popover-content'><p></p></div></div></div>"
    });
    $(element).popover("show");
    return setTimeout(function () { $(element).popover("hide"); }, 2000);
}

//kết xuất dữ liệu biến động để đưa xuống server
function ketXuatDuLieuBienDong(bienDongType, bienDongStep, data) {
    var bienDongTypeNum;
    switch (bienDongType) {
        case 'CapGiayLanDau':
            bienDongTypeNum = 0;
            break;
        case 'ChuyenQuyen':
            bienDongTypeNum = 1;
            break;
        case 'TachThua':
            bienDongTypeNum = 2;
            break;
        case 'GopThua':
            bienDongTypeNum = 3;
            break;
        case 'TheChap':
            bienDongTypeNum = 4;
            break;
        case 'XoaTheChap':
            bienDongTypeNum = 5;
            break;
        case 'BoSungTaiSan':
            bienDongTypeNum = 6;
            break;
        case 'CapDoi':
            bienDongTypeNum = 7;
            break;
        case 'GiaoThueNhaNuoc':
            bienDongTypeNum = 8;
            break;
        case 'GiaoThueCaNhan':
            bienDongTypeNum = 9;
            break;
        case 'ChuyenMucDichSuDung':
            bienDongTypeNum = 10;
            break;
        case 'DinhChinhGiayChungNhan':
            bienDongTypeNum = 11;
            break;
        case 'KetThucChoThue':
            bienDongTypeNum = 12;
            break;
        case 'ChuyenHinhThucGiaoThue':
            bienDongTypeNum = 13;
            break;
        case 'GiaHanSuDungDat':
            bienDongTypeNum = 14;
            break;
        case 'ThuHoiGiayChungNhan':
            bienDongTypeNum = 15;
            break;
        case 'ChoThueLai':
            bienDongTypeNum = 16;
            break;
        case 'HanCheQuyen':
            bienDongTypeNum = 17;
            break;
        case 'HanCheThuaLienKe':
            bienDongTypeNum = 18;
            break;
        case 'TachThuaChuyenQuyen':
            bienDongTypeNum = 19;
            break;
    }
    if (!VBDLIS.Global.duLieuBienDong[bienDongType]) {
        VBDLIS.Global.duLieuBienDong[bienDongType] = [];
    }
    if (VBDLIS.Global.duLieuBienDong[bienDongType].length > 0 && VBDLIS.Global.duLieuBienDong[bienDongType][bienDongStep - 1]) {
        VBDLIS.Global.duLieuBienDong[bienDongType][bienDongStep - 1] = {
            BienDongType: bienDongTypeNum,
            BuocThucHien: bienDongStep,
            DuLieu: JSON.stringify(data)
        };
    } else {
        VBDLIS.Global.duLieuBienDong[bienDongType].push({
            BienDongType: bienDongTypeNum,
            BuocThucHien: bienDongStep,
            DuLieu: JSON.stringify(data)
        });
    }
    return VBDLIS.Global.duLieuBienDong[bienDongType];
}

function duLieuBienDongCoThayDoi(bienDongType, bienDongStep, data) {
    if (VBDLIS.Global.duLieuBienDong[bienDongType] && VBDLIS.Global.duLieuBienDong[bienDongType].length > 0 && VBDLIS.Global.duLieuBienDong[bienDongType][bienDongStep - 1] && isJson(VBDLIS.Global.duLieuBienDong[bienDongType][bienDongStep - 1].DuLieu) && isObjectEqual(data, JSON.parse(VBDLIS.Global.duLieuBienDong[bienDongType][bienDongStep - 1].DuLieu))) {
        return false;
    } else {
        return true;
    }
}

//xử lý kết quả ajax trả về
function processAjaxResult(dataORjqXHR, textStatus, jqXHRORerrorThrown, callback, options) {
    var data;
    switch (textStatus) {
        case 'success':
            GLOBAL.isAjaxFailed = false;
            if (options) {
                switch (options.requestType) {
                    case 'script':
                        GLOBAL.waitAll++;
                        if (typeof VBDLIS.VModule.VModuleJsLoader[options.fnLoad] === 'function') {
                            VBDLIS.VModule.VModuleJsLoader[options.fnLoad]($(options.script));
                        }
                        break;
                    case 'form':
                        var dom = $(dataORjqXHR);
                        if (options.vModule && options.vModule.VModuleId) {
                            bindScriptsDynamic(dom, function () {
                                $("#mdlRemoteFormBody-" + options.vModule.VModuleId).html(dom);
                            });
                            $("#mdlRemoteFormBody-" + options.vModule.VModuleId).find(".modal").appendTo($("#dvModalContainer"));
                            dom.find(".modal").appendTo($("#dvModalContainer"));
                        } else {
                            $("#mdlRemoteFormBody").html(dom);
                            bindScriptsDynamic(dom, function () {
                                $("#mdlRemoteForm").modal('show');
                            });
                            $("#mdlRemoteFormBody").find(".modal").appendTo($("#dvModalContainer"));
                            dom.find(".modal").appendTo($("#dvModalContainer"));
                        }
                        break;
                    case 'danhmuc':
                        if (dataORjqXHR && dataORjqXHR.success && dataORjqXHR.success === true) {
                            if (dataORjqXHR.version !== options.localVersion) {
                                saveToLocal('DanhMuc', dataORjqXHR);
                            }
                        } else {
                            GLOBAL.showMessage.show({ msg: "Không lấy được danh mục. " + dataORjqXHR.value, icon: GLOBAL.showMessage.UNSUCCESS });
                        }
                        break;
                }
            } else {
                data = tryParseDateInObject(dataORjqXHR);
            }
            break;
        case 'error':
        case 'timeout':
        case 'abort':
        case null:
            GLOBAL.isAjaxFailed = true;
            onError(dataORjqXHR, textStatus, jqXHRORerrorThrown);
            break;
        case 'parsererror':
            if (dataORjqXHR.responseText.includes('Đăng nhập')) {
                $('#loginAgainModal .login-form .erormess').html("");
                $('#loginAgainModal input').val("");
                $('#loginAgainModal').modal('show');
                $('.modal-backdrop.in').css({ 'background-image': 'url("' + GLOBAL.linkRoot + "/Assets/css/images/bg-login.png" + '")', 'opacity': 'inherit' });
            } else {
                onError(dataORjqXHR, textStatus, jqXHRORerrorThrown);
            }
            GLOBAL.isAjaxFailed = true;
            break;
        default:
            GLOBAL.isAjaxFailed = true;
            onError(dataORjqXHR, textStatus, jqXHRORerrorThrown);
    }
    if (options) {
        switch (options.requestType) {
            case 'script':
                if (GLOBAL.waitAll === options.scripts.length && typeof callback === 'function') {
                    callback();
                }
                break;
            case 'form':
            case 'danhmuc':
                if (typeof callback === 'function') {
                    callback();
                }
                break;
        }
    } else {
        if (dataORjqXHR && dataORjqXHR.success && dataORjqXHR.success === true) {
            if (typeof callback === 'function') {
                callback(data);
            }
        } else {
            if (dataORjqXHR && dataORjqXHR.responseText && dataORjqXHR.responseText.includes('Đăng nhập')) {
            } else {
                GLOBAL.showMessage.show({ msg: "Xử lý thất bại. " + (dataORjqXHR.Error ? dataORjqXHR.Error : dataORjqXHR.message), icon: GLOBAL.showMessage.UNSUCCESS });
            }
            GLOBAL.isAjaxFailed = true;
        }
    }
}

//chuyển chuỗi ngày định dd/mm/yyyy sang ISO-8601
function convertDateToISO8601(dateString) {
    if (dateString) {
        darr = dateString.split("/");
        var dobj = new Date(parseFloat(darr[2]), parseFloat(darr[1]) - 1, parseFloat(darr[0]));
        return dobj.toISOString();
    } else {
        return null;
    }
}

//gộp nhiều mảng thành một
function mergeArray(...args) {
    return [].concat(...args);
}

//gộp nhiều object thành một
function mergeObject(...args) {
    return args.reduce(function (currentArg, nextArg) {
        var mergedObj = {};
        for (var key in currentArg) {
            mergedObj[key] = currentArg[key];
        }
        for (var key in nextArg) {
            mergedObj[key] = $.isNumeric(nextArg[key]) ? parseFloat(nextArg[key]) : nextArg[key];
        }
        return mergedObj;
    });
}

//clone object
function cloneObject(obj) {
    return $.extend(true, {}, obj);
}

//khóa các element
function blockElements(parentElement, listElements) {
    if (listElements) {
        $.each(listElements, function (indexInArray, valueOfElement) {
            parentElement.find(valueOfElement).attr('disabled', true);
        });
    }
    else {
        $(parentElement.find('a, button')).each(function (index, element) {
            if ($(this).attr('data-toggle')) {
                $(this).removeAttr('data-toggle');
            }
            $(this).off('click');
            $(this).attr('disabled', true);
        });
        parentElement.find('input, select, textarea, .treeControl').attr('disabled', true);
    }
}

//mở khóa các element
function unblockElements(parentElement, listElements) {
    $.each(listElements, function (indexInArray, valueOfElement) {
        parentElement.find("[name='" + valueOfElement + "']").attr('disabled', false);
    });
}

//kiểm tra chuỗi JSON hợp lệ
function isJson(item) {
    item = typeof item !== "string"
        ? JSON.stringify(item)
        : item;
    try {
        item = JSON.parse(item);
    } catch (e) {
        return false;
    }
    if (typeof item === "object" && item !== null) {
        return true;
    }
    return false;
}

//thêm số 0 vào chuỗi number
function addZeroToNum(str, max) {
    str = str.toString();
    return str.length < max ? addZeroToNum("0" + str, max) : str;
}

//xử lý collapse
function switchBindButton(element, mode) {
    var currentBtnChiTiet = element.find('[id^="btnTraCuu"]');
    var currentPanel = element.closest('.panel');
    if (element.prop('id').startsWith('dvTraCuu')) {
        currentBtnChiTiet[(mode === 'show' ? 'add' : 'remove') + 'Class']('BindButton');
        if (currentPanel.length > 0) {
            $('[id^="btnTraCuu"]').filter(function () {
                return element.closest(currentPanel).length === 1;
            }).not(currentBtnChiTiet)[(mode === 'show' ? 'remove' : 'add') + 'Class']('BindButton');
        } else {
            var currentDv = element;
            $('[id^="btnTraCuu"]').filter(function () {
                return element.closest(currentDv).length === 0;
            })[(mode === 'show' ? 'remove' : 'add') + 'Class']('BindButton');
        }
    }
}

//lấy ngày(giờ) hiện tại
function getCurrentDate(options = { time: false }) {
    var now = new Date();
    var year = now.getFullYear();
    var month = now.getMonth() + 1;
    var day = now.getDate();
    var hour = now.getHours();
    var minute = now.getMinutes();
    var second = now.getSeconds();
    if (month.toString().length == 1) {
        var month = '0' + month;
    }
    if (day.toString().length == 1) {
        var day = '0' + day;
    }
    if (hour.toString().length == 1) {
        var hour = '0' + hour;
    }
    if (minute.toString().length == 1) {
        var minute = '0' + minute;
    }
    if (second.toString().length == 1) {
        var second = '0' + second;
    }
    var dateTime;
    if (options.time) {
        dateTime = day + '/' + month + '/' + year + ' ' + hour + ':' + minute + ':' + second;
    } else {
        dateTime = day + '/' + month + '/' + year;
    }
    return dateTime;
}
// #endregion

// #region  self invoked anonymous functions
//cấu hình alertify
//alertify.[default,info,warning,error,success]("[tl,tr,tc,bl,br]", message)
var alertify = function () {
    function AlertifyNotify(type, pos, mes) {
        var msgtitle = "";
        switch (type) {
            case "default":
                msgtitle = "Thông báo";
                break;
            case "info":
                msgtitle = "Thông tin";
                break;
            case "warning":
                msgtitle = "Cảnh báo";
                break;
            case "error":
                msgtitle = "Thất bại";
                break;
            case "success":
                msgtitle = "Thành công";
                break;
        }
        switch (pos) {
            case "tc":
                pos = "top center";
                break;
            case "tl":
                pos = "top left";
                break;
            case "tr":
                pos = "top right";
                break;
            case "bl":
                pos = "bottom left";
                break;
            case "br":
                pos = "bottom right";
                break;
        }
        Lobibox.notify(type, {
            sound: false,
            delayIndicator: true,
            position: pos,
            title: msgtitle,
            msg: mes,
            messageHeight: "auto"
        }).$el.css("word-wrap", "break-word");
    }
    return {
        default: function (pos, mes) {
            AlertifyNotify("default", pos, mes);
        },
        info: function (pos, mes) {
            AlertifyNotify("info", pos, mes);
        },
        warning: function (pos, mes) {
            AlertifyNotify("warning", pos, mes);
        },
        error: function (pos, mes) {
            AlertifyNotify("error", pos, mes);
        },
        success: function (pos, mes) {
            AlertifyNotify("success", pos, mes);
        }
    };
}();
// #endregion

// #region self invoked anonymous functions with a parameter called "$"
(function ($) {

    //$('<b>').data('x', 1).filterByData('x', 1).length    // output: 1
    //$('<b>').data('x', 1).filterByData('x').length       // output: 1
    $.fn.filterByData = function (prop, val) {
        var $self = this;
        if (typeof val === 'undefined') {
            return $self.filter(
                function () { return typeof $(this).data(prop) !== 'undefined'; }
            );
        }
        return $self.filter(
            function () { return $(this).data(prop) === val; }
        );
    };

    //Vô hiệu hóa modal khi xử lý
    $.fn.mask = function (text) {

        if (!text) {
            text = "Đang tải...";
        }

        var spanMsg = $("<span class='x-mask-msg' style='position: absolute;background-color: #e5e5e5'><i class='fa fa-spin fa-spinner'></i> " + text + "</span>");
        var divStyle = "text-align: center;z-index: 100;position: absolute;width: 100%;height: 100%;zoom: 1;background: white;opacity: .7;left: 0; top: 0";
        var mask = $("<div class='x-mask' style='" + divStyle + "'></div>").append(spanMsg);

        var resizeContent = function () {
            var height = mask.height();
            var msgHeight = spanMsg.height();

            var marginTopMsg = Math.floor(height / 2) - Math.floor(msgHeight / 2);

            spanMsg.css("margin-top", marginTopMsg + "px");
        };

        this.append(mask);

        resizeContent();
    };

    //Bỏ vô hiệu hóa modal khi xử lý
    $.fn.unmask = function () {
        this.find(".x-mask").remove();
    };

})($);
// #endregion

// #region events listener

//bind nút enter
$(document).on("keypress", function (event) {
    if (event.keyCode === 13) {
        if ($(".modal.in").length === 0) {
            if ($(document).find("ul.nav-tabs").length === 0) {
                $(document).find(".BindButton").click();
            }
            else {
                $(document).find(".tab-pane.active").find(".BindButton").click();
            }
        }
    }
});

//bind tabs events
$("a[data-toggle='tab']").on("shown.bs.tab", function (e) {
    $(e.target).closest(".modal").find("#btnAutoFocus").focus();
});

//bind window events
window.onerror = function (msg, url, lineNo, columnNo, error) {
    loading(false);
    if (typeof (msg) !== 'object') {
        var string = msg ? msg.toLowerCase() : msg;
        var substring = "script error";
        if (string.indexOf(substring) > -1) {
            alert('Lỗi chưa xác định: Mở cửa sổ console để xem chi tiết');
        } else {
            var message = [
                'Nội dung lỗi: ' + msg,
                'Tập tin lỗi: ' + url,
                'Dòng: ' + lineNo
                //'Cột: ' + columnNo
            ];
            JSON.stringify(error) !== "{}" && message.push({ 'Đối tượng lỗi': JSON.stringify(error) });
            alert(message.join(' \n ') + '\nVui lòng mở cửa sổ console để xem chi tiết.');
        }
    }
    else {
        alert('Lỗi chưa xác định: Mở cửa sổ console để xem chi tiết');
    }
    return false;
    //var errorbox = document.createElement('div');
    //errorbox.className = 'fancyerror';
    //errorbox.innerHTML = 'JS: <span class="errmsg"' +
    //    msg.replace('<', '&lt;').replace('>', '&gt;') +
    //    '</span><br>line number: ' + lineNo +
    //    '<br>located: ' + url;
    //document.body.appendChild(errorbox);
    //return false;
};

$(document).ajaxStart(function () {
    loading(true);
});

$(document).ajaxStop(function () {
    loading(false);
});
// #endregion